[
    {
        "question": "A company makes two types of phones, a large size and a small size. The large size phone take 20 minutes on the manufacturing belt and 12 minutes of testing. The small size phone takes 15 minutes on the manufacturing belt and 10 minutes of testing. The company has 1500  minutes  available on the manufacturing belt and 1000 minutes available for testing. If the profit per large phone is $400 and the profit per small phone is $300, how many of each should they make to maximize profit?",
        "formatted_answers": "The number of large phones to produce: ?\nThe number of small phones to produce: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_phones = LpVariable(\"NumLargePhones\", lowBound=0, cat='Integer') # number of large size phones\nnum_small_phones = LpVariable(\"NumSmallPhones\", lowBound=0, cat='Integer') # number of small size phones\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PhoneProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 400 * num_large_phones + 300 * num_small_phones\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 20 * num_large_phones + 15 * num_small_phones <= 1500 # manufacturing time constraint\nproblem += 12 * num_large_phones + 10 * num_small_phones <= 1000 # testing time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of large phones to produce:\", num_large_phones.value())\nprint(\"The number of small phones to produce:\", num_small_phones.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "John mixes two brands of cereal to ensure he gets at least 400 units of iron and 450 units of fiber. A serving of cereal A contains 25 units of iron and 30 units of fiber. A serving of cereal B contains 20 units of iron and 40 units of fiber. If cereal A costs $0.45 per serving and cereal B costs $0.55 per serving, how many servings of each should John buy in order to minimize costs?",
        "formatted_answers": "The number of servings of cereal A: ?\nThe number of servings of cereal B: ?\nThe total cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"CerealA\", lowBound=0, cat='Continuous') # number of servings of cereal A\ny = LpVariable(\"CerealB\", lowBound=0, cat='Continuous') # number of servings of cereal B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeCerealCost\", LpMinimize)\n\n# Define the objective function\nproblem += 0.45 * x + 0.55 * y # minimize the cost of servings\n\n# Define the constraints\nproblem += 25 * x + 20 * y >= 400 # iron requirement\nproblem += 30 * x + 40 * y >= 450 # fiber requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of servings of cereal A:\", x.value())\nprint(\"The number of servings of cereal B:\", y.value())\nprint(\"The total cost:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "EcoBuild is a construction company that can work on a maximum of two building projects simultaneously due to its workforce limitations.\nEcoBuild estimates the profit and the number of workers required for each type of project, as shown in the following Table.\nTable (Estimated profit and number of workers required per project type):\n| Project Type | Workers Required | Estimated Profit (in $1,000s) |\n|--------------|------------------|-------------------------------|\n| Residential  | 8                | 90                            |\n| Commercial   | 12               | 130                           |\nEcoBuild wants to maximize the total estimated profit from the projects they take on.\nThe total number of workers available is 20.\nDue to market conditions, they want to work on at least one commercial project.\nThe company also wants to ensure that the number of residential projects does not exceed the number of commercial projects by more than one.",
        "formatted_answers": "The number of residential projects: ?\nThe number of commercial projects: ?\nThe total estimated profit ($1,000s): ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nRp = LpVariable(\"ResidentialProjects\", lowBound=0, cat='Integer') # number of residential projects\nCp = LpVariable(\"CommercialProjects\", lowBound=0, cat='Integer') # number of commercial projects\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 90 * Rp + 130 * Cp\nproblem += objective # maximize the total estimated profit\n\n# Define the constraints\nproblem += 8 * Rp + 12 * Cp <= 20 # the total number of workers available is 20\nproblem += Cp >= 1 # at least one commercial project\nproblem += Rp <= Cp + 1 # residential projects do not exceed commercial projects by more than one\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of residential projects:\", Rp.value())\nprint(\"The number of commercial projects:\", Cp.value())\nprint(\"The total estimated profit ($1,000s):\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "SweetBakes, a bakery, produces cakes and cookies. They have a single oven that can bake either product.\nThe oven can bake a limited number of cakes and cookie batches in a day. Each cake requires 25 minutes of oven time, and each cookie batch requires 40 minutes. The profit made from each is given in the following Table.\nTable (Oven time and profit for cakes and cookies):\n| Product Type | Oven Time (minutes) | Profit per Unit |\n| ------------ | -------------------- | --------------- |\n| Cakes        | 25                   | $20             |\n| Cookies      | 40                   | $10             |\nSweetBakes wants to maximize their daily profit based on their oven usage.\nThe oven operates for 8 hours a day (480 minutes).\nThe bakery wants to bake at least 5 cakes each day to meet minimum demand.\nThe bakery does not want to bake more than 10 batches of cookies due to storage limitations.",
        "formatted_answers": "The number of cakes to bake: ?\nThe number of cookie batches to bake: ?\nThe maximum daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Cakes\", lowBound=5, cat='Integer') # number of cakes, at least 5\nB = LpVariable(\"CookieBatches\", lowBound=0, upBound=10, cat='Integer') # number of cookie batches, at most 10\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 20 * C + 10 * B, \"Total Profit\"\n\n# Define the constraints\nproblem += 25 * C + 40 * B <= 480, \"Oven Time Constraint\"\nproblem += C >= 5, \"Minimum Cakes Constraint\"\nproblem += B <= 10, \"Maximum Cookie Batches Constraint\"\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of cakes to bake:\", C.value())\nprint(\"The number of cookie batches to bake:\", B.value())\nprint(\"The maximum daily profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bike shop sells two models of a bike: a mountain bike and a road bike. The mountain bike costs $750 and yields a profit of $300. The road bike costs $1000 and yields a profit of $500. The bike shop owner knows that the monthly demand will be at most 150 bikes. He also wants to make sure that there is at most $40000 worth of bikes in stock. How many bikes of each type should be stocked in order to maximize profit?",
        "formatted_answers": "The number of mountain bikes to stock: ?\nThe number of road bikes to stock: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_mountain_bikes = LpVariable(\"NumMountainBikes\", lowBound=0, cat='Integer') # number of mountain bikes\nnum_road_bikes = LpVariable(\"NumRoadBikes\", lowBound=0, cat='Integer') # number of road bikes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BikeShopProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * num_mountain_bikes + 500 * num_road_bikes\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_mountain_bikes + num_road_bikes <= 150 # maximum monthly demand\nproblem += 750 * num_mountain_bikes + 1000 * num_road_bikes <= 40000 # maximum stock value\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of mountain bikes to stock:\", num_mountain_bikes.value())\nprint(\"The number of road bikes to stock:\", num_road_bikes.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Bakery Delights is planning to produce two types of bread: Wheat and Rye. Each type of bread requires different baking times and ingredients. The table below shows the baking time in hours and the profit made on each type of bread per batch. The bakery has one oven that can operate for up to 40 hours a week. The demand for Wheat bread batches is at least twice the demand for Rye bread batches each week. Due to delivery commitments, the bakery must produce at least 5 batches of Rye bread. There is a maximum storage capacity for 25 batches of bread of any type. The bakery aims to maximize its profit while considering the baking time and oven availability.\nTable (Baking time and profit per batch for two types of bread):\n| Bread Type | Baking Time (hours/batch) | Profit ($/batch) |\n| ---------- | ------------------------- | ---------------- |\n| Wheat      | 2                         | 15               |\n| Rye        | 3                         | 20               |",
        "formatted_answers": "The number of Wheat bread batches: ?\nThe number of Rye bread batches: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW = LpVariable(\"WheatBreadBatches\", lowBound=0, cat='Integer') # number of Wheat bread batches\nR = LpVariable(\"RyeBreadBatches\", lowBound=0, cat='Integer') # number of Rye bread batches\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * W + 20 * R\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * W + 3 * R <= 40 # oven can operate for up to 40 hours a week\nproblem += W >= 2 * R # Wheat bread demand is at least twice the Rye bread demand\nproblem += R >= 5 # at least 5 batches of Rye bread must be produced\nproblem += W + R <= 25 # maximum storage capacity for 25 batches of bread\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of Wheat bread batches:\", W.value())\nprint(\"The number of Rye bread batches:\", R.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "GreenGrow Inc. has 3 types of fertilizers to use on its crops: Nitrogen, Phosphate, and Potassium. The company needs to determine how much of each to apply to maximize crop yield.\nThe cost per ton and effectiveness (measured in crop yield increase per ton) of each fertilizer are shown in the following Table.\nTable (Cost per ton and effectiveness of each fertilizer):\n| Fertilizer Type | Cost per Ton ($) | Effectiveness (Crop Yield Increase per Ton) |\n|-----------------|------------------|---------------------------------------------|\n| Nitrogen        | 500              | 20                                          |\n| Phosphate       | 400              | 25                                          |\n| Potassium       | 300              | 15                                          |\nMaximize the total effectiveness of the fertilizers applied to the crops.\nThe budget for fertilizers is $10,000.\nThe total amount of fertilizers used cannot exceed 30 tons due to environmental regulations.\nAt least 5 tons of Phosphate fertilizer must be used as it is essential for root development.",
        "formatted_answers": "Tons of Nitrogen fertilizer used: ?\nTons of Phosphate fertilizer used: ?\nTons of Potassium fertilizer used: ?\nTotal effectiveness of the fertilizers: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nN = LpVariable(\"Nitrogen\", lowBound=0, cat='Continuous') # tons of Nitrogen fertilizer used\nP = LpVariable(\"Phosphate\", lowBound=0, cat='Continuous') # tons of Phosphate fertilizer used\nK = LpVariable(\"Potassium\", lowBound=0, cat='Continuous') # tons of Potassium fertilizer used\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeCropYield\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * N + 25 * P + 15 * K\nproblem += objective # maximize the total effectiveness of the fertilizers\n\n# Define the constraints\nproblem += 500 * N + 400 * P + 300 * K <= 10000 # budget constraint\nproblem += N + P + K <= 30 # environmental regulation constraint\nproblem += P >= 5 # essential Phosphate usage constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Tons of Nitrogen fertilizer used:\", N.value())\nprint(\"Tons of Phosphate fertilizer used:\", P.value())\nprint(\"Tons of Potassium fertilizer used:\", K.value())\nprint(\"Total effectiveness of the fertilizers:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "You are put on a special diet where you can drink two juices. Prune juice contains 10 grams of vitamin A, 12 grams of vitamin B, 5 grams of fiber, and 15 grams of sugar per cup. Apple juice contains 12 grams of vitamin A, 15 grams of vitamin B, 3 grams of fiber, and 17 grams of sugar per cup. You must consume at least 105 grams of vitamin A and 120 grams of vitamin B. However you can consume at most 80 grams of fiber. How many cups of each juice should you drink to minimize the amount of sugar?",
        "formatted_answers": "Cups of prune juice: ?\nCups of apple juice: ?\nAmount of sugar consumed: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"CupsOfPruneJuice\", lowBound=0, cat='Continuous') # number of cups of prune juice\ny = LpVariable(\"CupsOfAppleJuice\", lowBound=0, cat='Continuous') # number of cups of apple juice\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietProblem\", LpMinimize)\n\n# Define the objective function\nproblem += 15 * x + 17 * y # minimize the amount of sugar consumed\n\n# Define the constraints\nproblem += 10 * x + 12 * y >= 105 # vitamin A requirement\nproblem += 12 * x + 15 * y >= 120 # vitamin B requirement\nproblem += 5 * x + 3 * y <= 80 # fiber limit\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Cups of prune juice:\", x.value())\nprint(\"Cups of apple juice:\", y.value())\nprint(\"Amount of sugar consumed:\", (15 * x + 17 * y).value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "In an arcade shooter, each duck shot is 5 points and each goose shot is 6 points. You must shoot at least 5 ducks and at least 3 geese to pass the level. However, you can shoot at most 12 ducks and at most 7 geese. In addition, you only have enough bullets to shoot 15 animals total. How many of each animal should you shoot to maximize your points?",
        "formatted_answers": "The number of ducks shot: ?\nThe number of geese shot: ?\nThe total points: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"DucksShot\", lowBound=5, upBound=12, cat='Integer') # number of ducks shot\ny = LpVariable(\"GeeseShot\", lowBound=3, upBound=7, cat='Integer') # number of geese shot\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ArcadeShooter\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * x + 6 * y\nproblem += objective # maximize the total points\n\n# Define the constraints\nproblem += x >= 5 # minimum number of ducks shot\nproblem += x <= 12 # maximum number of ducks shot\nproblem += y >= 3 # minimum number of geese shot\nproblem += y <= 7 # maximum number of geese shot\nproblem += x + y <= 15 # total number of animals shot\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of ducks shot:\", x.value())\nprint(\"The number of geese shot:\", y.value())\nprint(\"The total points:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A costume store sells police officer costumes and fireman costumes. It takes 10 minutes to make a police officer costume and 12 minutes to make a fireman costume. Due to popularity, the store must make at least 3 times as many fireman costumes as police officer costumes. The store has 3000 minutes available to make costumes. If the profit per police officer costume is $10 and the profit per fireman costume is $12, how many of each should they make to maximize profit?",
        "formatted_answers": "The number of police officer costumes: ?\nThe number of fireman costumes: ?\nTotal profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_police_costumes = LpVariable(\"NumPoliceCostumes\", lowBound=0, cat='Integer') # number of police officer costumes\nnum_fireman_costumes = LpVariable(\"NumFiremanCostumes\", lowBound=0, cat='Integer') # number of fireman costumes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CostumeStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 10 * num_police_costumes + 12 * num_fireman_costumes\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 10 * num_police_costumes + 12 * num_fireman_costumes <= 3000 # time constraint\nproblem += 3 * num_police_costumes <= num_fireman_costumes # at least 3 times as many fireman costumes as police officer costumes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of police officer costumes:\", num_police_costumes.value())\nprint(\"The number of fireman costumes:\", num_fireman_costumes.value())\nprint(\"Total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Bakery Delights is planning to produce two types of bread: Wheat and Rye. Each type of bread requires different baking times and ingredients.\nThe table below shows the baking time in hours and the profit made on each type of bread per batch.\nTable (Baking time and profit per batch for two types of bread):\n| Bread Type | Baking Time (hours/batch) | Profit ($/batch) |\n| ---------- | ------------------------- | ---------------- |\n| Wheat      | 2                         | 15               |\n| Rye        | 3                         | 20               |\nThe bakery aims to maximize its profit while considering the baking time and oven availability.\nThe bakery has one oven that can operate for up to 40 hours a week.\nThe demand for Wheat bread batches is at least twice the demand for Rye bread batches each week.\nDue to delivery commitments, the bakery must produce at least 5 batches of Rye bread.\nThere is a maximum storage capacity for 25 batches of bread of any type.",
        "formatted_answers": "The number of Wheat bread batches: ?\nThe number of Rye bread batches: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW = LpVariable(\"WheatBreadBatches\", lowBound=0, cat='Integer') # number of Wheat bread batches\nR = LpVariable(\"RyeBreadBatches\", lowBound=0, cat='Integer') # number of Rye bread batches\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * W + 20 * R\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * W + 3 * R <= 40 # oven can operate for up to 40 hours a week\nproblem += W >= 2 * R # Wheat bread demand is at least twice the Rye bread demand\nproblem += R >= 5 # at least 5 batches of Rye bread must be produced\nproblem += W + R <= 25 # maximum storage capacity for 25 batches of bread\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of Wheat bread batches:\", W.value())\nprint(\"The number of Rye bread batches:\", R.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A wedding cake company mixes two cake mixes to get a perfect consistency. Vanilla cake mix contains 3% leavening agent and 55% flour. Chocolate cake mix contains 2% leavening agent and 43% flour. The final mixture needs at least 0.3 kg of leavening agent and 10 kg of flour. If the cost per kg of vanilla cake mix is $10 and the cost per kg of chocolate cake mix is $15, how many kg of each should the wedding cake company buy to minimize costs?",
        "formatted_answers": "The kg of vanilla cake mix to buy: ?\nThe kg of chocolate cake mix to buy: ?\nThe minimum cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nkg_vanilla_cake_mix = LpVariable(\"kgVanillaCakeMix\", lowBound=0) # kg of vanilla cake mix\nkg_chocolate_cake_mix = LpVariable(\"kgChocolateCakeMix\", lowBound=0) # kg of chocolate cake mix\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WeddingCakeMix\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * kg_vanilla_cake_mix + 15 * kg_chocolate_cake_mix\nproblem += objective # minimize the cost of cake mix\n\n# Define the constraints\nproblem += 0.03 * kg_vanilla_cake_mix + 0.02 * kg_chocolate_cake_mix >= 0.3 # leavening agent constraint\nproblem += 0.55 * kg_vanilla_cake_mix + 0.43 * kg_chocolate_cake_mix >= 10 # flour constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The kg of vanilla cake mix to buy:\", kg_vanilla_cake_mix.value())\nprint(\"The kg of chocolate cake mix to buy:\", kg_chocolate_cake_mix.value())\nprint(\"The minimum cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A sandwich store makes large and small sandwiches. Each large sandwich takes 4 minutes of preparation and 5 minutes of toasting. Each small sandwich takes 3 minutes of preparation and 4 minutes of toasting. The store has available 1000 minutes for preparation and 1200 minutes for toasting. If the profit per large sandwich is $5 and the profit per small sandwich is $3.50, how many of each should they make to maximize profit?",
        "formatted_answers": "The number of large sandwiches made: ?\nThe number of small sandwiches made: ?\nTotal profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_sandwiches = LpVariable(\"NumLargeSandwiches\", lowBound=0, cat='Integer') # number of large sandwiches made\nnum_small_sandwiches = LpVariable(\"NumSmallSandwiches\", lowBound=0, cat='Integer') # number of small sandwiches made\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SandwichStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_large_sandwiches + 3.5 * num_small_sandwiches\nproblem += objective # maximize the profit from sandwiches\n\n# Define the constraints\nproblem += 4 * num_large_sandwiches + 3 * num_small_sandwiches <= 1000 # preparation time constraint\nproblem += 5 * num_large_sandwiches + 4 * num_small_sandwiches <= 1200 # toasting time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of large sandwiches made:\", num_large_sandwiches.value())\nprint(\"The number of small sandwiches made:\", num_small_sandwiches.value())\nprint(\"Total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "MetroBakers is planning to produce two types of bread: Whole Wheat and Multigrain. Each type of bread can be baked in ovens that hold up to ten trays at a time.\nEach oven tray yields a different number of bread loaves for each type. The following table shows the number of loaves produced per tray in a day.\nTable (The number of loaves per tray produced in a day):\n| Bread Type   | Whole Wheat | Multigrain |\n| ------------ | ----------- | ---------- |\n| Loaves/Tray  | 40          | 30         |\nThe cost of preparing a tray for Whole Wheat is $15 and for Multigrain is $20. Each oven uses $200 in electricity per day. Maximize the total number of loaves produced while minimizing costs.\nEach oven can hold up to ten trays at a time.\nDue to demand, the bakery must produce at least 200 Whole Wheat and 150 Multigrain loaves daily.\nThe bakery wants to ensure that at least twice as many Whole Wheat loaves are produced as Multigrain loaves.",
        "formatted_answers": "The number of Whole Wheat bread trays: ?\nThe number of Multigrain bread trays: ?\nThe total number of loaves produced: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW = LpVariable(\"WholeWheatTrays\", lowBound=0, cat='Integer') # number of Whole Wheat bread trays\nM = LpVariable(\"MultigrainTrays\", lowBound=0, cat='Integer') # number of Multigrain bread trays\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 40 * W + 30 * M - (15 * W + 20 * M + 200)\nproblem += objective # maximize the total number of loaves produced while minimizing costs\n\n# Define the constraints\nproblem += W <= 10 # Each oven can hold up to ten trays at a time for Whole Wheat\nproblem += M <= 10 # Each oven can hold up to ten trays at a time for Multigrain\nproblem += 40 * W >= 200 # At least 200 Whole Wheat loaves daily\nproblem += 30 * M >= 150 # At least 150 Multigrain loaves daily\nproblem += 40 * W >= 2 * 30 * M # At least twice as many Whole Wheat loaves as Multigrain loaves\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of Whole Wheat bread trays:\", W.value())\nprint(\"The number of Multigrain bread trays:\", M.value())\nprint(\"The total number of loaves produced:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A flower grower has 120 acres of agricultural land in which he wants to plant tulips and orchids. The seed for tulips costs $15 per acre whereas the seed for orchids costs $40 per acre. The profit per acre of tulips is $75 whereas the profit for orchids is $105 an acre. If the grower has a maximum budget of $1200 to spend on seeds, determine how many tulips and orchids he needs to plant to maximize his profit.",
        "formatted_answers": "The number of acres for tulips: ?\nThe number of acres for orchids: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_acres_tulips = LpVariable(\"NumAcresTulips\", lowBound=0, cat='Integer') # number of acres for tulips\nnum_acres_orchids = LpVariable(\"NumAcresOrchids\", lowBound=0, cat='Integer') # number of acres for orchids\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FlowerGrowerProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 75 * num_acres_tulips + 105 * num_acres_orchids\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 15 * num_acres_tulips + 40 * num_acres_orchids <= 1200 # budget constraint for seeds\nproblem += num_acres_tulips + num_acres_orchids <= 120 # land constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of acres for tulips:\", num_acres_tulips.value())\nprint(\"The number of acres for orchids:\", num_acres_orchids.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Speedy Delivery has a fleet of delivery trucks and vans. They need to decide how many of each to operate to meet delivery demands.\nThe carrying capacities and operational costs for trucks and vans are shown in the following Table.\nTable (Carrying capacity and weekly operational cost for trucks and vans):\n| Vehicle Type | Carrying Capacity (units) | Weekly Operational Cost |\n| ------------ | ------------------------- | ----------------------- |\n| Truck        | 800                       | $2000                   |\n| Van          | 200                       | $500                    |\nSpeedy Delivery aims to minimize the operational costs while ensuring all deliveries are made.\nThe company can operate a maximum of 10 trucks and 25 vans each week.\nEach week, at least 5000 units must be delivered to meet demands.\nDue to maintenance and staffing, the company must operate at least 2 trucks and 3 vans each week.\nInsurance costs are $150 per truck and $70 per van per week. The total insurance costs must not exceed $4000 per week.",
        "formatted_answers": "The number of trucks to operate: ?\nThe number of vans to operate: ?\nThe total operational cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nT = LpVariable(\"Trucks\", lowBound=2, upBound=10, cat='Integer') # number of trucks\nV = LpVariable(\"Vans\", lowBound=3, upBound=25, cat='Integer') # number of vans\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SpeedyDelivery\", LpMinimize)\n\n# Define the objective function\nobjective = 2000 * T + 500 * V\nproblem += objective # minimize the operational costs\n\n# Define the constraints\nproblem += 800 * T + 200 * V >= 5000 # at least 5000 units must be delivered\nproblem += 150 * T + 70 * V <= 4000 # total insurance costs must not exceed $4000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of trucks to operate:\", T.value())\nprint(\"The number of vans to operate:\", V.value())\nprint(\"The total operational cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bookstore can display and sell at most 500 books. A profit of $5 is made on each hardcover book and a profit of $2 is made on each paperback book. The bookstore makes sure a minimum of 50 books displayed are hardcover. However, due to their convenience, at least 5 times as many reader prefer paperback books to hardcover books. Assuming the bookstore can sell all their books, how many of each book type, hardcover and softcover, should be displayed and sold in order to maximize profit?",
        "formatted_answers": "The number of hardcover books: ?\nThe number of paperback books: ?\nTotal profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"hardcover_books\", lowBound=50, cat='Integer') # number of hardcover books\ny = LpVariable(\"paperback_books\", lowBound=0, cat='Integer') # number of paperback books\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BookstoreProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * x + 2 * y\nproblem += objective, \"Total Profit\"# Define the constraints\nproblem += x + y <= 500, \"Space Constraint\"problem += x >= 50, \"Minimum Hardcover Constraint\"problem += y >= 5 * x, \"Paperback Preference Constraint\"# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of hardcover books:\", x.value())\nprint(\"The number of paperback books:\", y.value())\nprint(\"Total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A logistics company has a fleet of 2 types of delivery trucks: small and large. The company needs to decide how many of each to deploy to meet daily delivery demands. The carrying capacity and cost of operation per day for each type of truck are shown in the following Table.\nTable (Carrying capacity and cost of operation per day for each type of truck):\n| Truck Type | Carrying Capacity (kg) | Cost of Operation per Day ($) |\n|------------|------------------------|-------------------------------|\n| Small      | 1000                   | 200                           |\n| Large      | 5000                   | 700                           |\nThe company wants to minimize the total cost of operation while meeting the daily delivery capacity requirements. The company must deliver at least 45,000 kg of goods per day. It has only 8 small trucks and 5 large trucks available for deployment. The company also wants to use at least 2 large trucks each day to maintain their condition.",
        "formatted_answers": "The number of small trucks deployed: ?\nThe number of large trucks deployed: ?\nThe total cost of operation: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"SmallTrucks\", lowBound=0, cat='Integer') # number of small trucks deployed\nL = LpVariable(\"LargeTrucks\", lowBound=0, cat='Integer') # number of large trucks deployed\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LogisticsCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 200 * S + 700 * L\nproblem += objective # minimize the total cost of operation\n\n# Define the constraints\nproblem += 1000 * S + 5000 * L >= 45000 # must deliver at least 45,000 kg of goods per day\nproblem += S <= 8 # only 8 small trucks available\nproblem += L <= 5 # only 5 large trucks available\nproblem += L >= 2 # use at least 2 large trucks each day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of small trucks deployed:\", S.value())\nprint(\"The number of large trucks deployed:\", L.value())\nprint(\"The total cost of operation:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "SweetTreats is a company specializing in the production of two varieties of candy bars: chocolate and caramel. They have a daily production capacity in terms of hours for each variety.\nThe daily profit and production time required to produce each variety of candy bars are shown in the following Table.\nTable (Daily profit and production time per candy bar):\n| Candy Type | Production Time (hours per bar) | Profit (per bar) |\n|------------|---------------------------------|------------------|\n| Chocolate  | 0.5                              | $1.20            |\n| Caramel    | 0.75                             | $1.50            |\nSweetTreats wants to maximize the daily profit from the production of candy bars.\nThe company can only spend a total of 16 hours on production each day.\nThe company wants to ensure that at least 10 chocolate bars and 8 caramel bars are produced each day.\nDue to market demand, the company wants to produce no more than twice as many chocolate bars as caramel bars.",
        "formatted_answers": "Hours spent producing chocolate bars: ?\nHours spent producing caramel bars: ?\nMaximum daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nHc = LpVariable(\"HoursChocolate\", lowBound=0, cat='Integer') # hours spent producing chocolate bars\nHca = LpVariable(\"HoursCaramel\", lowBound=0, cat='Integer') # hours spent producing caramel bars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CandyProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 1.20 * Hc + 1.50 * Hca\nproblem += objective # maximize the daily profit\n\n# Define the constraints\nproblem += 0.5 * Hc + 0.75 * Hca <= 16 # total production time constraint\nproblem += Hc >= 10 * (1/0.5) # at least 10 chocolate bars\nproblem += Hca >= 8 * (1/0.75) # at least 8 caramel bars\nproblem += Hc <= 2 * Hca * (1/0.5) # no more than twice as many chocolate bars as caramel bars\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Hours spent producing chocolate bars:\", Hc.value())\nprint(\"Hours spent producing caramel bars:\", Hca.value())\nprint(\"Maximum daily profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Iota Food wants to advertise the release of their new product using ads in three areas: grocery stores, train stations, and water parks. They have a weekly advertising budget of $50000. The cost of an ad in each area and their audience reach is given. An ad in a grocery store costs $300 and reaches 10000 viewers. An ad at a train station costs $500 and reaches 20000 viewers. An ad in a water park costs $1000 and reaches 50000 viewers. The city limits the number of ads at a train station from a single company to 15. In order to maintain balance, at most a third of the total number of ads should be in water parks and a minimum of 10% of ads should be in grocery stores. How many ads should be run in each of the three areas in order to maximize viewership?",
        "formatted_answers": "The number of ads in grocery stores: ?\nThe number of ads in train stations: ?\nThe number of ads in water parks: ?\nThe number of viewers reached: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"AdsInGroceryStores\", lowBound=0, cat='Integer') # number of ads in grocery stores\ny = LpVariable(\"AdsInTrainStations\", lowBound=0, cat='Integer') # number of ads in train stations\nz = LpVariable(\"AdsInWaterParks\", lowBound=0, cat='Integer') # number of ads in water parks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeViewership\", LpMaximize)\n\n# Define the objective function\nobjective = 10000*x + 20000*y + 50000*z\nproblem += objective # maximize the number of viewers reached\n\n# Define the constraints\nproblem += 300*x + 500*y + 1000*z <= 50000 # budget constraint\nproblem += y <= 15 # train station ad limit\nproblem += z <= (x + y + z)/3 # water park ad limit, converted from division to multiplication\nproblem += x >= 0.1*(x + y + z) # grocery store ad limit, converted from division to multiplication\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of ads in grocery stores:\", x.value())\nprint(\"The number of ads in train stations:\", y.value())\nprint(\"The number of ads in water parks:\", z.value())\nprint(\"The number of viewers reached:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A clothing store is hosting a sale and has a total of 500 items available for customers to purchase. The store estimates that they can sell at most 200 shirts during the sale. The store has a limited stock of 150 pants available for sale. The store makes a profit of $20 on each shirt, $30 on each pair of pants, and $50 on each dress. How many of each item should the store sell to maximize profit during the sale?",
        "formatted_answers": "The number of shirts to sell: ?\nThe number of pants to sell: ?\nThe number of dresses to sell: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_shirts = LpVariable(\"NumShirts\", lowBound=0, cat='Integer') # number of shirts\nnum_pants = LpVariable(\"NumPants\", lowBound=0, cat='Integer') # number of pants\nnum_dresses = LpVariable(\"NumDresses\", lowBound=0, upBound=500-200-150, cat='Integer') # number of dresses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClothingStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * num_shirts + 30 * num_pants + 50 * num_dresses\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_shirts <= 200 # at most 200 shirts can be sold\nproblem += num_pants <= 150 # only 150 pants are available for sale\nproblem += num_shirts + num_pants + num_dresses <= 500 # total items available for sale\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of shirts to sell:\", num_shirts.value())\nprint(\"The number of pants to sell:\", num_pants.value())\nprint(\"The number of dresses to sell:\", num_dresses.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Cafe Java is planning its coffee bean purchase for the upcoming month. They use two types of beans: Arabica and Robusta.\nThe cost and quality rating per pound for the two types of coffee beans are given in the following Table.\nTable (Cost and quality rating per pound for two types of coffee beans):\n| Bean Type | Cost per Pound | Quality Rating |\n| --------- | -------------- | -------------- |\n| Arabica   | $6             | 90             |\n| Robusta   | $3             | 60             |\nCafe Java wants to maximize the overall quality rating of their coffee bean purchase while keeping costs under control.\nThe total budget for coffee bean purchases is $5,000.\nThey want to purchase at least 500 pounds of beans in total.\nAt least 30% of the purchase should be Arabica beans.\nThe maximum storage capacity for beans is 800 pounds.",
        "formatted_answers": "The pounds of Arabica beans: ?\nThe pounds of Robusta beans: ?\nThe overall quality rating: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA = LpVariable(\"Pounds_of_Arabica\", lowBound=0, cat='Integer') # pounds of Arabica beans\nR = LpVariable(\"Pounds_of_Robusta\", lowBound=0, cat='Integer') # pounds of Robusta beans\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CoffeeBeanPurchase\", LpMaximize)\n\n# Define the objective function\nobjective = 90 * A + 60 * R\nproblem += objective # maximize the overall quality rating\n\n# Define the constraints\nproblem += 6 * A + 3 * R <= 5000 # total budget constraint\nproblem += A + R >= 500 # minimum purchase constraint\nproblem += A >= 0.3 * (A + R) # at least 30% Arabica beans constraint\nproblem += A + R <= 800 # maximum storage capacity constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The pounds of Arabica beans:\", A.value())\nprint(\"The pounds of Robusta beans:\", R.value())\nprint(\"The overall quality rating:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Mary follows a new daily diet for which she needs to have at least 100 grams of vitamin A, 500 grams of vitamin C, and 3000 grams of proteins. In order to do so, her dietician recommended her to drink a protein drink or fruit snack. The protein drink costs $4 per serving and contains 45 grams of vitamin A, 200 grams of vitamin C, and 300 grams of proteins. Fruit snack costs $12 per serving and contains 400 grams of vitamin A, 600 unit of vitamin C, and 200 grams of proteins. How many servings of each should Mary buy to minimize her cost?",
        "formatted_answers": "The number of servings of protein drink: ?\nThe number of servings of fruit snack: ?\nThe total cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_protein_drink_servings = LpVariable(\"NumProteinDrinkServings\", lowBound=0, cat='Continuous') # number of servings of protein drink\nnum_fruit_snack_servings = LpVariable(\"NumFruitSnackServings\", lowBound=0, cat='Continuous') # number of servings of fruit snack\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MarysDiet\", LpMinimize)\n\n# Define the objective function\nobjective = 4 * num_protein_drink_servings + 12 * num_fruit_snack_servings\nproblem += objective # minimize the cost of servings\n\n# Define the constraints\nproblem += 45 * num_protein_drink_servings + 400 * num_fruit_snack_servings >= 100 # vitamin A requirement\nproblem += 200 * num_protein_drink_servings + 600 * num_fruit_snack_servings >= 500 # vitamin C requirement\nproblem += 300 * num_protein_drink_servings + 200 * num_fruit_snack_servings >= 3000 # protein requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of servings of protein drink:\", num_protein_drink_servings.value())\nprint(\"The number of servings of fruit snack:\", num_fruit_snack_servings.value())\nprint(\"The total cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A game involves throwing red bean bags and blue bean bags at a target. Each red bean bag that hits the target is worth 5 points and each blue bean bag that hits the target is worth 8 points. You must throw at least 3 red bean bags and 2 blue bean bags, but at most 8 of either type. In total, you must throw 12 bean bags. Assuming you always hit the target, how many of each color bean bag should you throw to maximize your points?",
        "formatted_answers": "The number of red bean bags thrown: ?\nThe number of blue bean bags thrown: ?\nThe total points scored: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_red_bean_bags = LpVariable(\"NumRedBeanBags\", lowBound=3, upBound=8, cat='Integer') # number of red bean bags thrown\nnum_blue_bean_bags = LpVariable(\"NumBlueBeanBags\", lowBound=2, upBound=8, cat='Integer') # number of blue bean bags thrown\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeBeanBagPoints\", LpMaximize)\n\n# Define the objective function\nproblem += 5 * num_red_bean_bags + 8 * num_blue_bean_bags # maximize the total points scored\n\n# Define the constraints\nproblem += num_red_bean_bags + num_blue_bean_bags == 12 # total number of bean bags thrown\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of red bean bags thrown:\", num_red_bean_bags.value())\nprint(\"The number of blue bean bags thrown:\", num_blue_bean_bags.value())\nprint(\"The total points scored:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Amy owns a bakery and sells two types of bread: croissant and ficelle. Each croissant requires 12 minutes of mixing and 2 tablespoons of vanilla extract. Each ficelle requires 17 minutes of mixing and 1 tablespoon of vanilla extract. There are 350 minutes of mixing time available and 45 tablespoons of vanilla extract available. Each croissant can be sold for $4.5 and each ficelle can be sold for $3.5. Formulate an LP to maximize Amy's revenue, then graphically solve the LP. (A fractional number of bread is okay)",
        "formatted_answers": "The number of croissants: ?\nThe number of ficelles: ?\nThe maximum revenue: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_croissants = LpVariable(\"NumCroissants\", lowBound=0, cat='Continuous') # number of croissants\nnum_ficelles = LpVariable(\"NumFicelles\", lowBound=0, cat='Continuous') # number of ficelles\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryRevenueMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 4.5 * num_croissants + 3.5 * num_ficelles\nproblem += objective # maximize the total revenue\n\n# Define the constraints\nproblem += 12 * num_croissants + 17 * num_ficelles <= 350 # mixing time constraint\nproblem += 2 * num_croissants + num_ficelles <= 45 # vanilla extract constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of croissants:\", num_croissants.value())\nprint(\"The number of ficelles:\", num_ficelles.value())\nprint(\"The maximum revenue:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A boy buys and sells two types of hoodies. Zippered hoodies cost him $20 each and pullover hoodies cost his $15 each. He can spend a total of $450. He can sell at most 25 hoodies total. If the profit per zippered hoodie is $5 and the profit per pullover hoodie is $4, how many of each should he buy and sell to maximize his profit?",
        "formatted_answers": "The number of zippered hoodies to buy and sell: ?\nThe number of pullover hoodies to buy and sell: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_zippered_hoodies = LpVariable(\"NumZipperedHoodies\", lowBound=0, cat='Integer') # number of zippered hoodies\nnum_pullover_hoodies = LpVariable(\"NumPulloverHoodies\", lowBound=0, cat='Integer') # number of pullover hoodies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HoodieSales\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_zippered_hoodies + 4 * num_pullover_hoodies\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 20 * num_zippered_hoodies + 15 * num_pullover_hoodies <= 450 # budget constraint\nproblem += num_zippered_hoodies + num_pullover_hoodies <= 25 # number of hoodies sold must be less than or equal to 25\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of zippered hoodies to buy and sell:\", num_zippered_hoodies.value())\nprint(\"The number of pullover hoodies to buy and sell:\", num_pullover_hoodies.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A fashion company produces two types of handbags using skilled and unskilled labor. The productivity and cost of labor vary between the two types of labor. The following table shows the details. The company aims to maximize the number of handbags produced while keeping labor costs within a weekly budget of $6000. At least 40 premium bags and 100 regular bags need to be produced weekly. The company can allocate a maximum of 150 hours for skilled labor and 200 hours for unskilled labor per week.\nTable (Productivity and labor cost per hour for handbags):\n| Handbag Type | Skilled Labor (Premium Bags) | Unskilled Labor (Regular Bags) |\n| ------------- | ---------------------------- | ----------------------------- |\n| Bags/hour    | 0.2                          | 0.5                           |\n| Cost/hour    | $30                          | $15                           |\n\nHow should the fashion company allocate hours for skilled and unskilled labor to maximize handbag production while not exceeding the labor cost budget?",
        "formatted_answers": "Hours of skilled labor for premium bags: ?\nHours of unskilled labor for regular bags: ?\nNumber of premium bags produced: ?\nNumber of regular bags produced: ?\nTotal number of handbags produced: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"SkilledLaborHours\", lowBound=0, cat='Integer') # hours of skilled labor for premium bags\nU = LpVariable(\"UnskilledLaborHours\", lowBound=0, cat='Integer') # hours of unskilled labor for regular bags\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeHandbags\", LpMaximize)\n\n# Define the objective function\nobjective = 0.2 * S + 0.5 * U\nproblem += objective # maximize the total number of handbags produced\n\n# Define the constraints\nproblem += 30 * S + 15 * U <= 6000 # the labor cost must be at most $6000\nproblem += 0.2 * S >= 40 # at least 40 premium bags\nproblem += 0.5 * U >= 100 # at least 100 regular bags\nproblem += S <= 150 # maximum of 150 hours for skilled labor\nproblem += U <= 200 # maximum of 200 hours for unskilled labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Hours of skilled labor for premium bags:\", S.value())\nprint(\"Hours of unskilled labor for regular bags:\", U.value())\nprint(\"Number of premium bags produced:\", 0.2 * S.value())\nprint(\"Number of regular bags produced:\", 0.5 * U.value())\nprint(\"Total number of handbags produced:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A circuit board company makes small and large circuit boards for customers. Both circuit boards requires time on a drilling machine and a printing machine. Each small circuit board takes 10 minutes on the drilling machine, 15 minutes on the printing machine and yields a profit of $5. Each large circuit board takes 15 minutes on the drilling machine, 18 minutes on the printing machine, and yields a profit of $7. If both machines are available for at most 600 minutes a day, how many of each circuit board should be made to maximize profit?",
        "formatted_answers": "The number of small circuit boards: ?\nThe number of large circuit boards: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_boards = LpVariable(\"NumSmallBoards\", lowBound=0, cat='Integer') # number of small circuit boards\nnum_large_boards = LpVariable(\"NumLargeBoards\", lowBound=0, cat='Integer') # number of large circuit boards\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CircuitBoardProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_small_boards + 7 * num_large_boards\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 10 * num_small_boards + 15 * num_large_boards <= 600 # drilling machine time constraint\nproblem += 15 * num_small_boards + 18 * num_large_boards <= 600 # printing machine time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of small circuit boards:\", num_small_boards.value())\nprint(\"The number of large circuit boards:\", num_large_boards.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "BakeBest has 2 ovens for baking cakes and cookies, with each oven capable of operating up to 10 hours a day. They make cakes and cookies, with each oven having different outputs per hour as shown in the following table.\nTable (The number of cakes and cookies produced per hour by each oven):\n| Product Type | Oven 1 Output | Oven 2 Output |\n| ------------ | ------------- | ------------- |\n| Cakes        | 10            | 8             |\n| Cookies      | 15            | 20            |\nThe cost to operate oven 1 is $50 per hour and oven 2 is $80 per hour. BakeBest wants to minimize the total operational cost while fulfilling daily orders of at least 80 cakes and at least 200 cookies. Additionally, they cannot produce more than 150 cakes in a day due to storage limitations. How should they operate the ovens to minimize costs while meeting production demands?",
        "formatted_answers": "The hours oven 1 operates: ?\nThe hours oven 2 operates: ?\nThe total operational cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nH1 = LpVariable(\"HoursOven1Operates\", lowBound=0, cat='Integer') # hours oven 1 operates\nH2 = LpVariable(\"HoursOven2Operates\", lowBound=0, cat='Integer') # hours oven 2 operates\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeBestOperationalCost\", LpMinimize)\n\n# Define the objective function\nobjective = 50 * H1 + 80 * H2\nproblem += objective # minimize the total operational cost\n\n# Define the constraints\nproblem += H1 <= 10 # oven 1 can operate up to 10 hours\nproblem += H2 <= 10 # oven 2 can operate up to 10 hours\nproblem += 10 * H1 + 8 * H2 >= 80 # at least 80 cakes\nproblem += 15 * H1 + 20 * H2 >= 200 # at least 200 cookies\nproblem += 10 * H1 + 8 * H2 <= 150 # no more than 150 cakes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The hours oven 1 operates:\", H1.value())\nprint(\"The hours oven 2 operates:\", H2.value())\nprint(\"The total operational cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A snow removal company uses their equipment in two cities and gets paid per kilogram of snow they remove. In the northern city, the net revenue per kilogram of snow is $2. In the southern city, the net revenue per kilogram of snow is $1.50. The company has one snow plow, one truck, and one shovel. Each item can be used for at most 500 minutes per day. At the northern city, to remove 1 kilogram of snow requires 2 minutes on the snow plow, 1 minute on the truck, and 5 minutes with the shovel. At the southern city, to remove 1 kilogram of snow requires 1 minute on the snow plow, 3 minutes on the truck, and 2 minutes with the shovel. How many kilograms of snow should be removed from each city to maximize profit?",
        "formatted_answers": "The number of kilograms of snow removed from the northern city: ?\nThe number of kilograms of snow removed from the southern city: ?\nThe total net revenue: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"KilogramsNorthernCity\", lowBound=0, cat='Continuous') # number of kilograms of snow removed from the northern city\ny = LpVariable(\"KilogramsSouthernCity\", lowBound=0, cat='Continuous') # number of kilograms of snow removed from the southern city\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SnowRemoval\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * x + 1.5 * y\nproblem += objective # maximize the total net revenue\n\n# Define the constraints\nproblem += 2 * x + y <= 500 # snow plow time constraint\nproblem += x + 3 * y <= 500 # truck time constraint\nproblem += 5 * x + 2 * y <= 500 # shovel time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of kilograms of snow removed from the northern city:\", x.value())\nprint(\"The number of kilograms of snow removed from the southern city:\", y.value())\nprint(\"The total net revenue:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "At the suggestion of a dietitian, Jamie wants to eat a diet which contains a minimum of 100 units of proteins and 60 units of fat. She can eat chicken and beef to supplement her current vegetable based diet. Chicken costs $3.4 per unit and beef costs $7.5 per unit. One unit of chicken has 10 units of proteins and 6 units of fat. One unit of beef has 30 units of proteins and 40 units of fat. Formulate this as a linear programming problem. Find the minimum cost for a diet that consists of a mixture of these two meats and also meets the minimal nutritional requirements.",
        "formatted_answers": "The number of units of chicken: ?\nThe number of units of beef: ?\nThe minimum cost for the diet: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"UnitsOfChicken\", lowBound=0, cat='Continuous') # number of units of chicken\ny = LpVariable(\"UnitsOfBeef\", lowBound=0, cat='Continuous') # number of units of beef\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 3.4 * x + 7.5 * y\nproblem += objective, \"Total cost of chicken and beef\"# Define the constraints\nproblem += 10 * x + 30 * y >= 100, \"Protein requirement\"problem += 6 * x + 40 * y >= 60, \"Fat requirement\"# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of units of chicken:\", x.value())\nprint(\"The number of units of beef:\", y.value())\nprint(\"The minimum cost for the diet:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "SweetTreats is a company that bakes cakes, cookies, and pies. They have two ovens that can be used to bake these treats.\nSweetTreats can bake a certain number of treats per hour in each oven. The number of treats baked per hour in each oven is shown in the following Table.\nTable (The number of treats baked per hour in each oven):\n| Treat Type | Oven 1 | Oven 2 |\n| ---------- | ------ | ------ |\n| Cakes      | 5      | 4      |\n| Cookies    | 10     | 8      |\n| Pies       | 2      | 3      |\nThe cost of operating oven 1 is $20 per hour and oven 2 is $35 per hour. SweetTreats wants to minimize the cost of baking a week's supply of treats.\nEach oven can be operated for up to 40 hours a week.\nEach week, SweetTreats needs to bake at least 150 cakes, 300 cookies, and 60 pies to meet demand.",
        "formatted_answers": "The number of hours oven 1 is used: ?\nThe number of hours oven 2 is used: ?\nThe total cost of baking: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nH1 = LpVariable(\"HoursOven1\", lowBound=0, cat='Integer') # number of hours oven 1 is used\nH2 = LpVariable(\"HoursOven2\", lowBound=0, cat='Integer') # number of hours oven 2 is used\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakingCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 20 * H1 + 35 * H2\nproblem += objective # minimize the cost of baking\n\n# Define the constraints\nproblem += H1 <= 40 # oven 1 can be operated for up to 40 hours a week\nproblem += H2 <= 40 # oven 2 can be operated for up to 40 hours a week\nproblem += 5 * H1 + 4 * H2 >= 150 # at least 150 cakes\nproblem += 10 * H1 + 8 * H2 >= 300 # at least 300 cookies\nproblem += 2 * H1 + 3 * H2 >= 60 # at least 60 pies\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of hours oven 1 is used:\", H1.value())\nprint(\"The number of hours oven 2 is used:\", H2.value())\nprint(\"The total cost of baking:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A landscaping company has to plant trees in two different districts. The company has a total of 12 workers it can assign to these districts.\nThe company plants three types of trees in the districts. The number of trees each worker can plant in a day in each district is shown in the following Table.\nTable (The number of trees planted by each worker in each district per day):\n| Tree Type | District 1 | District 2 |\n| --------- | ---------- | ---------- |\n| Oak       | 5          | 3          |\n| Pine      | 4          | 6          |\n| Maple     | 2          | 4          |\nEach worker is paid $100 per day in district 1, and $120 per day in district 2. The company aims to minimize the total labor cost while meeting the planting requirements.\nThe total number of workers assigned to both districts cannot exceed 12.\nIn a day, the company needs to plant at least 40 oak trees, 50 pine trees, and 30 maple trees across both districts to meet the contract requirements.\nEach district must have at least 3 workers to ensure team efficiency, but no more than 10 workers to avoid overcrowding.",
        "formatted_answers": "The number of workers in district 1: ?\nThe number of workers in district 2: ?\nThe total labor cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nD1 = LpVariable(\"WorkersInDistrict1\", lowBound=3, upBound=10, cat='Integer') # number of workers in district 1\nD2 = LpVariable(\"WorkersInDistrict2\", lowBound=3, upBound=10, cat='Integer') # number of workers in district 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeLaborCost\", LpMinimize)\n\n# Define the objective function\nobjective = 100 * D1 + 120 * D2\nproblem += objective # minimize the total labor cost\n\n# Define the constraints\nproblem += D1 + D2 <= 12 # total number of workers cannot exceed 12\nproblem += 5 * D1 + 3 * D2 >= 40 # at least 40 oak trees\nproblem += 4 * D1 + 6 * D2 >= 50 # at least 50 pine trees\nproblem += 2 * D1 + 4 * D2 >= 30 # at least 30 maple trees\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of workers in district 1:\", D1.value())\nprint(\"The number of workers in district 2:\", D2.value())\nprint(\"The total labor cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "There is only 5000 grams of a rare flower extract needed to make both youth and adult doses. Youth doses contain 20 grams of extract and adult doses contain 35 grams. Demand is such that at least three times as many youth doses are needed than the adult doses. A minimum of 10 adult doses need to be made. Youth doses are sold for a profit of $5 while adult doses are sold at a profit of $3. How many of each dose should be prepared to maximize profit?",
        "formatted_answers": "The number of youth doses: ?\nThe number of adult doses: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_youth_doses = LpVariable(\"NumYouthDoses\", lowBound=0, cat='Integer') # number of youth doses\nnum_adult_doses = LpVariable(\"NumAdultDoses\", lowBound=10, cat='Integer') # number of adult doses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DoseProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_youth_doses + 3 * num_adult_doses\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 20 * num_youth_doses + 35 * num_adult_doses <= 5000 # amount of flower extract constraint\nproblem += num_youth_doses >= 3 * num_adult_doses # demand constraint\n# Note that the minimum number of adult doses constraint is already included in the variable definition\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of youth doses:\", num_youth_doses.value())\nprint(\"The number of adult doses:\", num_adult_doses.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Matter Auto manufactures EV cars and hybrid trucks that are targeted for baby boomers and millennials. To market these two products, Matter Auto has launched a boisterous ads campaign and has decided to purchase TV commercial spots on two channels: TV shows and sports programs. Each sports ad is seen by 4 million baby boomers and 18 million millennials and costs $90,000. Each TV show commercial is watched by 12 million baby boomers and 5 million millennials, and costs $20,000. Matter Auto would like to reach at least 40 million baby boomers and 25 million millennials. Determine how Matter Auto can meet its advertising requirements at minimum cost.",
        "formatted_answers": "Number of sports ads to purchase: ?\nNumber of TV show commercials to purchase: ?\nMinimum cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"SportsAds\", lowBound=0, cat='Continuous') # number of sports ads\ny = LpVariable(\"TVShowCommercials\", lowBound=0, cat='Continuous') # number of TV show commercials\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AdvertisingCostMinimization\", LpMinimize)\n\n# Define the objective function\nproblem += 90000 * x + 20000 * y # minimize the total cost of ads\n\n# Define the constraints\nproblem += 4 * x + 12 * y >= 40 # baby boomer viewership must be at least 40 million\nproblem += 18 * x + 5 * y >= 25 # millennial viewership must be at least 25 million\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Number of sports ads to purchase:\", x.value())\nprint(\"Number of TV show commercials to purchase:\", y.value())\nprint(\"Minimum cost:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Two sisters, Joy and Willa, run a stand selling green tea and pancakes. A pitcher of green tea takes 0.7 hours of Joy's time along with 0.3 hours of Willa's time. A batch of pancakes takes 1.2 hours of Joy's time and 0.6 hours of Willa's time. Joy has 8 hours available each day, but since Willa has hockey lessons, she only has 5 hours available each day. They get $2.5 profit per pitcher of green tea, and $10 per batch of pancakes. Formulate an LP to maximize profit.",
        "formatted_answers": "The number of pitchers of green tea: ?\nThe number of batches of pancakes: ?\nTotal profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_green_tea = LpVariable(\"NumGreenTea\", lowBound=0, cat='Continuous') # number of pitchers of green tea\nnum_pancakes = LpVariable(\"NumPancakes\", lowBound=0, cat='Continuous') # number of batches of pancakes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 2.5 * num_green_tea + 10 * num_pancakes\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 0.7 * num_green_tea + 1.2 * num_pancakes <= 8 # Joy's time constraint\nproblem += 0.3 * num_green_tea + 0.6 * num_pancakes <= 5 # Willa's time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of pitchers of green tea:\", num_green_tea.value())\nprint(\"The number of batches of pancakes:\", num_pancakes.value())\nprint(\"Total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Gary eats only noodles and cakes for a diet. A serving of noodles contains 5 units of proteins and 12 units of minerals. A serving of cake contains 4 units of proteins and 8 units of minerals. He wants to receive at most 100 units of proteins and at most 30 units of minerals. If noodles cost $3 per serving and each cake cost $5, how many servings of each food should Gary eat to minimize his cost?",
        "formatted_answers": "The number of servings of noodles: ?\nThe number of servings of cake: ?\nThe total cost of the diet: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_servings_noodles = LpVariable(\"NumServingsNoodles\", lowBound=0, cat='Continuous') # number of servings of noodles\nnum_servings_cake = LpVariable(\"NumServingsCake\", lowBound=0, cat='Continuous') # number of servings of cake\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GaryDiet\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_servings_noodles + 5 * num_servings_cake\nproblem += objective # minimize the cost of food\n\n# Define the constraints\nproblem += 5 * num_servings_noodles + 4 * num_servings_cake <= 100 # protein constraint\nproblem += 12 * num_servings_noodles + 8 * num_servings_cake <= 30 # minerals constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of servings of noodles:\", num_servings_noodles.value())\nprint(\"The number of servings of cake:\", num_servings_cake.value())\nprint(\"The total cost of the diet:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Delish Bakery offers 3 different pastries: croissants, muffins, and scones. The bakery can bake a certain number each day.\nEach pastry requires a different amount of baking time in hours and generates a different profit. The following Table shows the baking time and profit for each pastry type per unit.\nTable (Baking time in hours and profit for each pastry per unit):\n| Pastry Type | Baking Time (hours/unit) | Profit ($/unit) |\n| ----------- | ------------------------- | --------------- |\n| Croissants  | 0.3                       | 1.50            |\n| Muffins     | 0.2                       | 1.20            |\n| Scones      | 0.25                      | 1.70            |\nThe bakery aims to maximize the daily profit from baking these pastries.\nThe bakery operates for 8 hours a day.\nDue to oven capacity, the bakery can bake at most 20 croissants, 30 muffins, and 25 scones each day.\nThe demand requires at least 10 croissants, 5 muffins, and 8 scones to be baked each day.\nThe bakery wants to ensure that muffins make up at least 25% of the total number of pastries baked.",
        "formatted_answers": "The number of croissants baked per day: ?\nThe number of muffins baked per day: ?\nThe number of scones baked per day: ?\nThe maximum daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Croissants\", lowBound=10, upBound=20, cat='Integer') # number of croissants baked per day\nM = LpVariable(\"Muffins\", lowBound=5, upBound=30, cat='Integer') # number of muffins baked per day\nS = LpVariable(\"Scones\", lowBound=8, upBound=25, cat='Integer') # number of scones baked per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 1.50 * C + 1.20 * M + 1.70 * S\nproblem += objective # maximize the daily profit\n\n# Define the constraints\nproblem += 0.3 * C + 0.2 * M + 0.25 * S <= 8 # bakery operates for 8 hours a day\nproblem += C >= 10 # at least 10 croissants\nproblem += M >= 5 # at least 5 muffins\nproblem += S >= 8 # at least 8 scones\nproblem += M >= 0.25 * (C + M + S) # muffins make up at least 25% of the total pastries\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of croissants baked per day:\", C.value())\nprint(\"The number of muffins baked per day:\", M.value())\nprint(\"The number of scones baked per day:\", S.value())\nprint(\"The maximum daily profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A doctor prescribed two pills to a patient. Pill A contains 2 units of muscle relaxant, 3 units of anxiety medication, and 4 units of pain reliever per pill. Pill B contains 5 units of muscle relaxant, 1 unit of anxiety medication, and 3 units of pain reliever per pill. Pill A costs $3 per pill while pill B costs $5 per pill. The patient must get at least 30 units of muscle relaxant, 15 units of anxiety medication, and 20 units of pain reliever. How many of each pill should he buy to minimize his cost?",
        "formatted_answers": "The number of pill A to buy: ?\nThe number of pill B to buy: ?\nThe total cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable('x', lowBound=0, cat='Integer')  # number of pill A bought\ny = LpVariable('y', lowBound=0, cat='Integer')  # number of pill B bought\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeCost\", LpMinimize)\n\n# Define the objective function\nproblem += 3 * x + 5 * y  # minimize the cost of pills\n\n# Define the constraints\nproblem += 2 * x + 5 * y >= 30  # muscle relaxant requirement\nproblem += 3 * x + 1 * y >= 15  # anxiety medication requirement\nproblem += 4 * x + 3 * y >= 20  # pain reliever requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of pill A to buy:\", x.value())\nprint(\"The number of pill B to buy:\", y.value())\nprint(\"The total cost:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bakery produces bread, cakes, and pastries using two different ovens, with each oven capable of baking up to 10 batches at a time. The number of items produced per batch in each oven is shown in the following table:\n| Product Type | Oven 1 | Oven 2 |\n| ------------ | ------ | ------ |\n| Bread        | 60     | 0      |\n| Cake         | 0      | 25     |\n| Pastries     | 20     | 30     |\n\nGiven that the electricity cost for oven 1 is $2 per batch and for oven 2 is $3 per batch, how should the bakery allocate its production in order to minimize the cost of baking while meeting the weekly quota of at least 600 bread, at least 250 cakes, and at least 300 pastries, ensuring that at least twice as many bread items as cakes are produced?",
        "formatted_answers": "The number of bread batches in oven 1: ?\nThe number of cake batches in oven 2: ?\nThe number of pastry batches in oven 1: ?\nThe number of pastry batches in oven 2: ?\nThe total cost of baking: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nB1 = LpVariable(\"BreadBatchesOven1\", lowBound=0, cat='Integer')\nC1 = LpVariable(\"CakeBatchesOven2\", lowBound=0, cat='Integer')\nP1 = LpVariable(\"PastryBatchesOven1\", lowBound=0, cat='Integer')\nP2 = LpVariable(\"PastryBatchesOven2\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * (B1 + P1) + 3 * (C1 + P2)\nproblem += objective\n\n# Define the constraints\nproblem += B1 + P1 <= 10\nproblem += C1 + P2 <= 10\nproblem += 60 * B1 >= 600\nproblem += 25 * C1 >= 250\nproblem += 20 * P1 + 30 * P2 >= 300\nproblem += 60 * B1 >= 2 * 25 * C1\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of bread batches in oven 1:\", B1.value())\nprint(\"The number of cake batches in oven 2:\", C1.value())\nprint(\"The number of pastry batches in oven 1:\", P1.value())\nprint(\"The number of pastry batches in oven 2:\", P2.value())\nprint(\"The total cost of baking:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A dietitian is creating a meal plan using two ingredients: oats and whey protein.\nThe calorie content and cost per gram of each ingredient are shown in the following table.\nTable (Calorie content and cost per gram):\n| Ingredient   | Calories per gram | Cost per gram (cents) |\n| -------------| ----------------- | --------------------- |\n| Oats         | 4                 | 0.1                   |\n| Whey Protein | 4                 | 0.3                   |\nThe dietitian wants to minimize the cost of the meal while meeting calorie requirements.\nThe meal must have exactly 500 calories.\nThe amount of whey protein must be at least twice the amount of oats.\nThe dietitian doesn't want to use more than 50 grams of oats.",
        "formatted_answers": "Grams of oats: ?\nGrams of whey protein: ?\nTotal cost of the meal (in cents): ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nO = LpVariable(\"Oats\", lowBound=0, cat='Continuous') # grams of oats\nW = LpVariable(\"WheyProtein\", lowBound=0, cat='Continuous') # grams of whey protein\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MealPlan\", LpMinimize)\n\n# Define the objective function\nobjective = 0.1 * O + 0.3 * W\nproblem += objective # minimize the cost of the meal\n\n# Define the constraints\nproblem += 4 * O + 4 * W == 500 # the meal must have exactly 500 calories\nproblem += W >= 2 * O # the amount of whey protein must be at least twice the amount of oats\nproblem += O <= 50 # no more than 50 grams of oats\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Grams of oats:\", O.value())\nprint(\"Grams of whey protein:\", W.value())\nprint(\"Total cost of the meal (in cents):\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A landscaping company, GreenScape, offers garden design services with a selection of plants and trees.\nGreenScape has a fixed cost for each type of plant and an expected revenue from each.\nTable (Cost and expected revenue per plant):\n| Plant Type      | Cost per Unit ($) | Expected Revenue per Unit ($) |\n| --------------- | ----------------- | ----------------------------- |\n| Flowering Plant | 5                 | 15                            |\n| Tree            | 20                | 50                            |\nGreenScape aims to maximize the total profit from the garden designs.\nThe company has a budget of $2000 for purchasing plants and trees.\nAt least 100 flowering plants and 30 trees must be used each month for the designs to maintain variety.\nDue to space restrictions, the company can only hold a maximum of 500 plants and trees in total at any time.",
        "formatted_answers": "The number of flowering plants: ?\nThe number of trees: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nFlowers = LpVariable(\"Flowers\", lowBound=100, cat='Integer') # number of flowering plants\nTrees = LpVariable(\"Trees\", lowBound=30, cat='Integer') # number of trees\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GreenScapeProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = (15 - 5) * Flowers + (50 - 20) * Trees\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 5 * Flowers + 20 * Trees <= 2000 # budget constraint\nproblem += Flowers + Trees <= 500 # space restriction constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of flowering plants:\", Flowers.value())\nprint(\"The number of trees:\", Trees.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "An oil company produces economical, regular and premium grades of oil. Each tanker of economical grade oil produces a net revenue of $500, each tanker of regular grade oil produces a net revenue of $1020, and each tanker of premium grade oil produces a net revenue of $920. To produce a tanker of economical grade oil, 4 units of compound A and 2 units of compound B are required. To produce a tanker of regular grade oil, 5 units of compound A and 1 unit of compound B are required. To produce a tanker of premium grade oil, 8 units of compound A and 1 unit of compound B are required. Currently the company has 200  units of compound A and 100 units of compound B to process. How many full or partial tankers of each oil grade should the company produce so that net revenue is maximized?",
        "formatted_answers": "The number of tankers of economical grade oil: ?\nThe number of tankers of regular grade oil: ?\nThe number of tankers of premium grade oil: ?\nThe total net revenue: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"EconomicalGrade\", lowBound=0) # number of tankers of economical grade oil\ny = LpVariable(\"RegularGrade\", lowBound=0) # number of tankers of regular grade oil\nz = LpVariable(\"PremiumGrade\", lowBound=0) # number of tankers of premium grade oil\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"OilProduction\", LpMaximize)\n\n# Define the objective function\nproblem += 500 * x + 1020 * y + 920 * z, \"Total Net Revenue\" # maximize the total net revenue\n\n# Define the constraints\nproblem += 4 * x + 5 * y + 8 * z <= 200, \"Compound A Constraint\" # compound A constraint\nproblem += 2 * x + y + z <= 100, \"Compound B Constraint\" # compound B constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of tankers of economical grade oil:\", x.value())\nprint(\"The number of tankers of regular grade oil:\", y.value())\nprint(\"The number of tankers of premium grade oil:\", z.value())\nprint(\"The total net revenue:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Eric wants to sell his inventory of 25 wireless keyboards, 13 wired earbuds, and 19 USB hubs. He decides to offer two combos: Combo X and Combo Y. Combo X brings a profit of $12 and contains 2 wireless keyboards and 2 USB hubs. Combo Y yields a profit of $15 and contains 1 wireless keyboard, 3 wired earbuds, and 1 USB hub. Assuming he can sell all combos, how many of each should he prepare to maximize his profit?",
        "formatted_answers": "The number of Combo X prepared: ?\nThe number of Combo Y prepared: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_combo_X = LpVariable(\"NumComboX\", lowBound=0, cat='Integer') # number of Combo X prepared\nnum_combo_Y = LpVariable(\"NumComboY\", lowBound=0, cat='Integer') # number of Combo Y prepared\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 12 * num_combo_X + 15 * num_combo_Y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * num_combo_X + num_combo_Y <= 25 # wireless keyboard constraint\nproblem += 3 * num_combo_Y <= 13 # wired earbuds constraint\nproblem += 2 * num_combo_X + num_combo_Y <= 19 # USB hubs constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of Combo X prepared:\", num_combo_X.value())\nprint(\"The number of Combo Y prepared:\", num_combo_Y.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bakery produces bread and pastries using two ovens. The bakery operates for 8 hours a day.\nThe bakery produces different quantities of bread and pastries depending on the oven used. The following table shows the production per hour for each oven.\nTable (The number of items produced per hour by each oven):\n| Product Type | Oven 1 | Oven 2 |\n| ------------ | ------ | ------ |\n| Bread        | 50     | 40     |\n| Pastries     | 30     | 35     |\nThe profit from each loaf of bread is $0.30, and the profit from each pastry is $0.50. Maximize the total daily profit.\nEach oven can operate for a maximum of 8 hours a day.\nThe demand requires at least 300 loaves of bread and at least 200 pastries per day.\nOven 1 is more efficient for bread and must be used for bread for at least 3 hours each day.\nDue to a contract with a local restaurant, the bakery must produce at least twice as many loaves of bread as pastries.",
        "formatted_answers": "Number of hours oven 1 is used for bread: ?\nNumber of hours oven 1 is used for pastries: ?\nNumber of hours oven 2 is used for bread: ?\nNumber of hours oven 2 is used for pastries: ?\nTotal daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nB1 = LpVariable(\"B1\", lowBound=0, cat='Continuous') # number of hours oven 1 is used for bread\nP1 = LpVariable(\"P1\", lowBound=0, cat='Continuous') # number of hours oven 1 is used for pastries\nB2 = LpVariable(\"B2\", lowBound=0, cat='Continuous') # number of hours oven 2 is used for bread\nP2 = LpVariable(\"P2\", lowBound=0, cat='Continuous') # number of hours oven 2 is used for pastries\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 0.30 * (50 * B1 + 40 * B2) + 0.50 * (30 * P1 + 35 * P2)\nproblem += objective # maximize the total daily profit\n\n# Define the constraints\nproblem += B1 + P1 <= 8 # oven 1 can operate for a maximum of 8 hours a day\nproblem += B2 + P2 <= 8 # oven 2 can operate for a maximum of 8 hours a day\nproblem += 50 * B1 + 40 * B2 >= 300 # at least 300 loaves of bread per day\nproblem += 30 * P1 + 35 * P2 >= 200 # at least 200 pastries per day\nproblem += B1 >= 3 # oven 1 must be used for bread for at least 3 hours each day\nproblem += 50 * B1 + 40 * B2 >= 2 * (30 * P1 + 35 * P2) # produce at least twice as many loaves of bread as pastries\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Number of hours oven 1 is used for bread:\", B1.value())\nprint(\"Number of hours oven 1 is used for pastries:\", P1.value())\nprint(\"Number of hours oven 2 is used for bread:\", B2.value())\nprint(\"Number of hours oven 2 is used for pastries:\", P2.value())\nprint(\"Total daily profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "David has two types of liquid supplementation available: regular and premium. After consulting with a doctor, he finds that he needs a minimum of 30 grams of iron and 50 grams of calcium. Regular supplementation consists of 20% iron and 30% calcium while premium supplementation consists of 25% iron and 40% calcium. Regular supplementation costs $0.04 per gram while premium supplementation costs $0.08 per gram. How much of each supplementation should be used to meet his requirements and minimize cost?",
        "formatted_answers": "Amount of regular supplementation: ?\nAmount of premium supplementation: ?\nTotal cost of supplementation: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"RegularSupplementation\", lowBound=0, cat='Continuous') # amount of regular supplementation in grams\ny = LpVariable(\"PremiumSupplementation\", lowBound=0, cat='Continuous') # amount of premium supplementation in grams\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimumCost\", LpMinimize)\n\n# Define the objective function\nobjective = 0.04 * x + 0.08 * y\nproblem += objective # minimize the cost of supplementation\n\n# Define the constraints\nproblem += 0.2 * x + 0.25 * y >= 30 # iron requirement\nproblem += 0.3 * x + 0.4 * y >= 50 # calcium requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Amount of regular supplementation:\", x.value(), \"grams\")\nprint(\"Amount of premium supplementation:\", y.value(), \"grams\")\nprint(\"Total cost of supplementation:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "SweetBakery wants to optimize the production of cakes, cupcakes, and cookies. Each product requires a different amount of time in the oven and decoration.\nSweetBakery has a maximum of 10 hours of oven time and 8 hours of decoration time available daily. The following table shows the time required for each product:\nTable (Hours required for oven and decoration per product):\n| Product   | Oven Time (hours per unit) | Decoration Time (hours per unit) |\n| ----------| -------------------------- | -------------------------------- |\n| Cakes     | 0.5                        | 0.25                             |\n| Cupcakes  | 0.2                        | 0.1                              |\n| Cookies   | 0.15                       | 0.05                             |\nEach cake sold provides a profit of $15, each cupcake $2, and each cookie $1. Maximize the total daily profit.\nThe total oven time cannot exceed 10 hours daily, and the decoration time cannot exceed 8 hours daily.\nA minimum of 20 cakes must be produced daily to fulfil regular orders.\nNo more than 100 cupcakes can be produced daily due to limited packaging materials.\nThere must be at least as many cookies produced as the total number of cakes and cupcakes combined due to a promotional deal.",
        "formatted_answers": "The number of cakes produced daily: ?\nThe number of cupcakes produced daily: ?\nThe number of cookies produced daily: ?\nThe total daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nCakes = LpVariable(\"Cakes\", lowBound=20, cat='Integer') # number of cakes produced daily\nCupcakes = LpVariable(\"Cupcakes\", lowBound=0, upBound=100, cat='Integer') # number of cupcakes produced daily\nCookies = LpVariable(\"Cookies\", lowBound=0, cat='Integer') # number of cookies produced daily\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SweetBakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * Cakes + 2 * Cupcakes + 1 * Cookies\nproblem += objective # maximize the total daily profit\n\n# Define the constraints\nproblem += 0.5 * Cakes + 0.2 * Cupcakes + 0.15 * Cookies <= 10 # Oven Time Constraint\nproblem += 0.25 * Cakes + 0.1 * Cupcakes + 0.05 * Cookies <= 8 # Decoration Time Constraint\nproblem += Cakes >= 20 # Minimum cakes production constraint\nproblem += Cupcakes <= 100 # Maximum cupcakes production constraint\nproblem += Cookies >= Cakes + Cupcakes # Cookies production constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of cakes produced daily:\", Cakes.value())\nprint(\"The number of cupcakes produced daily:\", Cupcakes.value())\nprint(\"The number of cookies produced daily:\", Cookies.value())\nprint(\"The total daily profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bubble tea store sells two products: almond bubble tea and ginger bubble tea. The store makes x1 bottles of almond bubble tea a day at a profit of $5 each and x2 bottles of ginger bubble tea a day at a profit of $9 each. (x1 and x2 are unknowns and they both must be greater than or equal to 0). Currently, the demand is limited to at most 120 bottles of almond bubble tea per day and at most 200 bottles of ginger bubble tea per day. Also, the store can make a maximum of 300 bottles of bubble tea (ignoring the type) per day. How many of each bubble tea should be made to maximize profit?",
        "formatted_answers": "The number of bottles of almond bubble tea made per day: ?\nThe number of bottles of ginger bubble tea made per day: ?\nThe total daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"AlmondBubbleTea\", lowBound=0, cat='Continuous') # number of bottles of almond bubble tea made per day\nx2 = LpVariable(\"GingerBubbleTea\", lowBound=0, cat='Continuous') # number of bottles of ginger bubble tea made per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BubbleTeaProfitMaximization\", LpMaximize)\n\n# Define the objective function\nproblem += 5 * x1 + 9 * x2 # maximize the total daily profit\n\n# Define the constraints\nproblem += x1 <= 120 # demand constraint for almond bubble tea\nproblem += x2 <= 200 # demand constraint for ginger bubble tea\nproblem += x1 + x2 <= 300 # capacity constraint for total bottles made per day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of bottles of almond bubble tea made per day:\", x1.value())\nprint(\"The number of bottles of ginger bubble tea made per day:\", x2.value())\nprint(\"The total daily profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bakery makes chocolate and maple donuts. There is a daily demand of at least 50 chocolate donuts and at least 75 maple donuts. However the bakery can make at most 100 chocolate donuts and at most 150 maple donuts. They have a contract with a local grocery store and must make at least 200 donuts total of either type per day. If the profit per chocolate donut is $2 and the profit per maple donut is $3, how many of each should they make to maximize profit?",
        "formatted_answers": "The number of chocolate donuts to make: ?\nThe number of maple donuts to make: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"ChocolateDonuts\", lowBound=50, upBound=100, cat='Integer') # number of chocolate donuts made\ny = LpVariable(\"MapleDonuts\", lowBound=75, upBound=150, cat='Integer') # number of maple donuts made\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nproblem += 2 * x + 3 * y # maximize the profit\n\n# Define the constraints\nproblem += x + y >= 200 # minimum total donut production\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of chocolate donuts to make:\", x.value())\nprint(\"The number of maple donuts to make:\", y.value())\nprint(\"The maximum profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A milk tea store wants to make milk tea that has some red bean and pudding toppings. Each red bean topping contains 1.5 grams of sugar and 2.5 grams of butter; each pudding topping contains 3 grams of sugar and 1.2 grams of butter. For health reasons, the milk tea will have at most 3 red bean toppings. To make the milk tea tasty, at least 7 grams of sugar and 10 grams of butter must be used in the toppings of the milk tea. If it costs $1.5 to make one red bean topping and $2 for one pudding topping, what is the optimal combination of red bean and pudding toppings to minimize the cost?",
        "formatted_answers": "The number of red bean toppings: ?\nThe number of pudding toppings: ?\nThe total cost of toppings: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"RedBeanToppings\", lowBound=0, upBound=3, cat='Integer') # number of red bean toppings\ny = LpVariable(\"PuddingToppings\", lowBound=0, cat='Integer') # number of pudding toppings\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MilkTeaOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 1.5 * x + 2 * y\nproblem += objective # minimize the cost of toppings\n\n# Define the constraints\nproblem += 1.5 * x + 3 * y >= 7 # sugar constraint\nproblem += 2.5 * x + 1.2 * y >= 10 # butter constraint\n# The \"maximum red bean toppings constraint\" is already handled by 'upBound=3' in the definition of x\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of red bean toppings:\", x.value())\nprint(\"The number of pudding toppings:\", y.value())\nprint(\"The total cost of toppings:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A banana farmer has to transport his bananas using cars and motor bikes. Each car can take 100 bananas and each bike can take 30 bananas. The cost of running each car is $10 per trip and the cost of running each bike is $6 per trip. The farmer wants to spend at most $200 on transporting his bananas. Due to traffic laws, the number of cars must be less than the number of bikes. Formulate a LP to maximize the number of bananas that can be transported.",
        "formatted_answers": "The number of car trips: ?\nThe number of bike trips: ?\nThe number of bananas transported: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_car_trips = LpVariable(\"NumCarTrips\", lowBound=0, cat='Integer') # number of trips using cars\nnum_bike_trips = LpVariable(\"NumBikeTrips\", lowBound=0, cat='Integer') # number of trips using bikes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BananaTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 100 * num_car_trips + 30 * num_bike_trips\nproblem += objective # maximize the total number of bananas transported\n\n# Define the constraints\nproblem += 10 * num_car_trips + 6 * num_bike_trips <= 200 # budget constraint\nproblem += num_car_trips <= num_bike_trips # number of car trips must be less than number of bike trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of car trips:\", num_car_trips.value())\nprint(\"The number of bike trips:\", num_bike_trips.value())\nprint(\"The number of bananas transported:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A toy store sells hand made wooden trains and planes. Each train takes 30 minutes of woodworker time and each plane takes 40 minutes of woodworker time. The store has 4000 minutes of woodworker time available. Since planes are most popular, the store must make at least thrice the number of planes as trains. If the profit per train is $50 and the profit per plane is $60, how many of each should be made to maximize profit?",
        "formatted_answers": "The number of trains to make: ?\nThe number of planes to make: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_trains = LpVariable(\"NumTrains\", lowBound=0, cat='Integer') # number of trains made\nnum_planes = LpVariable(\"NumPlanes\", lowBound=0, cat='Integer') # number of planes made\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ToyStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * num_trains + 60 * num_planes\nproblem += objective # maximize the total profit from selling trains and planes\n\n# Define the constraints\nproblem += 30 * num_trains + 40 * num_planes <= 4000 # woodworker time constraint\nproblem += num_planes >= 3 * num_trains # at least thrice the number of planes as trains\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of trains to make:\", num_trains.value())\nprint(\"The number of planes to make:\", num_planes.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Frank has 1500 acres of land on which he plans to grow carrots and pumpkins. He has at most 1000 hours of tractor time available and $25000 of capital available. Each acre of carrots requires 15 hours of tractor work and $12 of capital, and each acre of pumpkins requires 20 hours of tractor work and $55 of capital. If the profit from an acre of carrots is $80 and the profit from an acre of pumpkins is $124, how many acres of each crop should he plant to maximize his profit?",
        "formatted_answers": "Acres of carrots to plant: ?\nAcres of pumpkins to plant: ?\nMaximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"AcresCarrots\", lowBound=0, cat='Continuous') # number of acres used for carrots\ny = LpVariable(\"AcresPumpkins\", lowBound=0, cat='Continuous') # number of acres used for pumpkins\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 80 * x + 124 * y # maximize the total profit\n\n# Define the constraints\nproblem += x + y <= 1500 # total land used must not exceed 1500 acres\nproblem += 15 * x + 20 * y <= 1000 # tractor time constraint\nproblem += 12 * x + 55 * y <= 25000 # capital constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Acres of carrots to plant:\", x.value())\nprint(\"Acres of pumpkins to plant:\", y.value())\nprint(\"Maximum profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A man wants to sell his berries at the market down the river. He can either use a boat to carry it down stream or have his neighbor carry it. A boat can take 200 units of berries per trip and cost $30 per trip. His neighbor can take 40 units of berries per trip and costs $8. The man does not want to spend more than $500 and the number of boat trips cannot exceed the number of trips his neighbor does. Formulate a LP to maximize the number of berries he can transport to the market?",
        "formatted_answers": "The number of boat trips: ?\nThe number of neighbor trips: ?\nThe number of berries transported: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_boat_trips = LpVariable(\"NumBoatTrips\", lowBound=0, cat='Integer') # number of boat trips\nnum_neighbor_trips = LpVariable(\"NumNeighborTrips\", lowBound=0, cat='Integer') # number of neighbor trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BerryTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_boat_trips + 40 * num_neighbor_trips\nproblem += objective # maximize the total number of berries transported\n\n# Define the constraints\nproblem += 30 * num_boat_trips + 8 * num_neighbor_trips <= 500 # budget constraint\nproblem += num_boat_trips <= num_neighbor_trips # boat trips must be less than or equal to neighbor trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of boat trips:\", num_boat_trips.value())\nprint(\"The number of neighbor trips:\", num_neighbor_trips.value())\nprint(\"The number of berries transported:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bakery produces three types of pastries using two different ovens. Each oven can operate for up to 16 hours a day.\nThe bakery makes croissants, muffins, and scones. The following table shows the number of each type of pastry that can be produced per hour in each oven.\nTable (Number of pastries produced per hour in each oven):\n| Pastry Type | Oven 1 | Oven 2 |\n| ----------- | ------ | ------ |\n| Croissants  | 40     | 30     |\n| Muffins     | 35     | 40     |\n| Scones      | 50     | 45     |\nEach oven costs $10 per hour to operate. The bakery aims to minimize the cost of operation while meeting the daily demand.\nEach oven can operate for up to 16 hours a day.\nThe bakery requires at least 500 croissants, 600 muffins, and 550 scones to be made daily.",
        "formatted_answers": "Hours oven 1 is running: ?\nHours oven 2 is running: ?\nTotal cost of operation: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nH1 = LpVariable(\"HoursOven1\", lowBound=0, upBound=16, cat='Continuous') # hours oven 1 is running\nH2 = LpVariable(\"HoursOven2\", lowBound=0, upBound=16, cat='Continuous') # hours oven 2 is running\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryOperationCost\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * H1 + 10 * H2\nproblem += objective # minimize the cost of operation\n\n# Define the constraints\nproblem += H1 <= 16 # oven 1 can operate up to 16 hours\nproblem += H2 <= 16 # oven 2 can operate up to 16 hours\nproblem += 40 * H1 + 30 * H2 >= 500 # at least 500 croissants\nproblem += 35 * H1 + 40 * H2 >= 600 # at least 600 muffins\nproblem += 50 * H1 + 45 * H2 >= 550 # at least 550 scones\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Hours oven 1 is running:\", H1.value())\nprint(\"Hours oven 2 is running:\", H2.value())\nprint(\"Total cost of operation:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "QuickCharge Inc. has launched two models of electric vehicle (EV) chargers: Standard and Fast. The company can produce up to 50 units of chargers in a month due to resource constraints.\nThe production cost and the profit per unit for Standard and Fast chargers are displayed in the following Table.\nTable (Production cost and profit per unit for two types of EV chargers):\n| Charger Type | Production Cost per Unit | Profit per Unit |\n| ------------ | ------------------------ | --------------- |\n| Standard     | $400                     | $50             |\n| Fast         | $800                     | $120            |\nQuickCharge Inc. wants to maximize its monthly profit from selling these EV chargers.\nDue to the production capacity, no more than 50 chargers can be produced in total.\nThe company has a budget of $30,000 for production costs this month.\nThe market research suggests that at least 10 Standard chargers should be produced to maintain market presence.\nTo prevent stockpiling, the company does not want to produce more than twice as many Standard chargers as Fast chargers.",
        "formatted_answers": "The number of Standard chargers produced: ?\nThe number of Fast chargers produced: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"StandardChargers\", lowBound=10, cat='Integer') # number of Standard chargers produced\nF = LpVariable(\"FastChargers\", lowBound=0, cat='Integer') # number of Fast chargers produced\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * S + 120 * F\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += S + F <= 50 # no more than 50 chargers in total\nproblem += 400 * S + 800 * F <= 30000 # budget constraint\nproblem += S <= 2 * F # no more than twice as many Standard chargers as Fast chargers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of Standard chargers produced:\", S.value())\nprint(\"The number of Fast chargers produced:\", F.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Bakery Delights is preparing for a local food festival where they will sell two types of pastries: croissants and tarts.\nFor the food festival, each pastry requires a certain amount of flour and sugar as shown in the following Table.\nTable (The amount of flour and sugar required for each pastry):\n| Pastry Type | Flour (in grams) | Sugar (in grams) |\n| ----------- | ---------------- | ---------------- |\n| Croissant   | 50               | 20               |\n| Tart        | 30               | 40               |\nThe bakery aims to maximize profit. Croissants are sold for $3 each, and tarts are sold for $4 each.\nThe bakery has a total of 20,000 grams of flour and 15,000 grams of sugar available for the festival.\nThe bakery wants to produce at least twice as many croissants as tarts.\nDue to oven capacity, the bakery can make at most 300 pastries in total.",
        "formatted_answers": "The number of croissants to make: ?\nThe number of tarts to make: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Croissants\", lowBound=0, cat='Integer') # number of croissants made\nT = LpVariable(\"Tarts\", lowBound=0, cat='Integer') # number of tarts made\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * C + 4 * T\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 50 * C + 30 * T <= 20000 # flour constraint\nproblem += 20 * C + 40 * T <= 15000 # sugar constraint\nproblem += C >= 2 * T # at least twice as many croissants as tarts\nproblem += C + T <= 300 # oven capacity constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of croissants to make:\", C.value())\nprint(\"The number of tarts to make:\", T.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "MegaFarm is planning its crop distribution for the upcoming season with 100 acres of land available for planting corn and wheat. The expected profit per acre and the water usage per acre for corn and wheat are indicated in the table below:\n| Crop Type | Profit per Acre | Water Usage per Acre (in thousands of gallons) |\n|-----------|-----------------|------------------------------------------------|\n| Corn      | $300            | 4                                              |\n| Wheat     | $250            | 3                                              |\n\nThe farm aims to maximize its total profit. The total land available for planting is limited to 100 acres, and there is a cap of 300 thousand gallons of water available for irrigation. Additionally, for crop diversity and contract fulfillment, at least 20 acres must be planted with wheat and at least 30 acres with corn. How should MegaFarm allocate its land between corn and wheat to maximize profits while adhering to these constraints?",
        "formatted_answers": "The acres of corn planted: ?\nThe acres of wheat planted: ?\nThe total profit from the crops: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nAcresCorn = LpVariable(\"AcresCorn\", lowBound=30, cat='Integer') # acres of corn planted, at least 30 acres\nAcresWheat = LpVariable(\"AcresWheat\", lowBound=20, cat='Integer') # acres of wheat planted, at least 20 acres\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CropDistribution\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * AcresCorn + 250 * AcresWheat\nproblem += objective # maximize the total profit from the crops\n\n# Define the constraints\nproblem += AcresCorn + AcresWheat <= 100 # total land available for planting is 100 acres\nproblem += 4 * AcresCorn + 3 * AcresWheat <= 300 # limit of 300 thousand gallons of water available for irrigation\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The acres of corn planted:\", AcresCorn.value())\nprint(\"The acres of wheat planted:\", AcresWheat.value())\nprint(\"The total profit from the crops:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "QuickTransport is planning to purchase a fleet of vans and trucks for their delivery service.\nThe capacity and cost of a van and a truck are different. The following table shows the delivery capacity (in packages) and the cost of each vehicle.\nTable (Capacity and Cost of Vehicles):\n| Vehicle Type | Delivery Capacity (Packages) | Cost (USD) |\n| ------------ | ---------------------------- | ---------- |\n| Van          | 200                          | 30,000     |\n| Truck        | 600                          | 80,000     |\nQuickTransport wants to minimize the total cost of purchasing the vehicles while meeting their delivery capacity needs.\nThe company needs to have enough vehicles to deliver at least 5000 packages daily.\nThe budget for purchasing vehicles is not to exceed $900,000.\nDue to parking space limitations, the company can purchase no more than 20 vehicles in total.\nThe company also wants to ensure that they have at least 4 trucks for heavier loads.",
        "formatted_answers": "The number of vans to purchase: ?\nThe number of trucks to purchase: ?\nThe total cost of purchasing the vehicles: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nVans = LpVariable(\"Vans\", lowBound=0, cat='Integer') # number of vans to purchase\nTrucks = LpVariable(\"Trucks\", lowBound=0, cat='Integer') # number of trucks to purchase\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"VehiclePurchase\", LpMinimize)\n\n# Define the objective function\nobjective = 30000 * Vans + 80000 * Trucks\nproblem += objective # minimize the total cost of purchasing the vehicles\n\n# Define the constraints\nproblem += 200 * Vans + 600 * Trucks >= 5000 # delivery capacity needs\nproblem += 30000 * Vans + 80000 * Trucks <= 900000 # budget constraint\nproblem += Vans + Trucks <= 20 # parking space limitation\nproblem += Trucks >= 4 # at least 4 trucks for heavier loads\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of vans to purchase:\", Vans.value())\nprint(\"The number of trucks to purchase:\", Trucks.value())\nprint(\"The total cost of purchasing the vehicles:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Tim Bakery sells chocolate croissants and strawberry croissants. The store pays a baker $3 and $5 for each unit of a chocolate and strawberry croissant respectively. The store makes a profit of $4 per chocolate croissant and a profit of $6 per strawberry croissant. In a month, the store owner expects to sell at most 1200 croissants and wants to spend at most $6000. How many of each type of croissant should be made in order to maximize the total monthly profit?",
        "formatted_answers": "The number of chocolate croissants: ?\nThe number of strawberry croissants: ?\nThe total monthly profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_chocolate_croissants = LpVariable(\"NumChocolateCroissants\", lowBound=0, cat='Integer') # number of chocolate croissants\nnum_strawberry_croissants = LpVariable(\"NumStrawberryCroissants\", lowBound=0, cat='Integer') # number of strawberry croissants\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TimBakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 4 * num_chocolate_croissants + 6 * num_strawberry_croissants\nproblem += objective # maximize the total monthly profit\n\n# Define the constraints\nproblem += num_chocolate_croissants + num_strawberry_croissants <= 1200 # maximum number of croissants\nproblem += 3 * num_chocolate_croissants + 5 * num_strawberry_croissants <= 6000 # store's budget constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of chocolate croissants:\", num_chocolate_croissants.value())\nprint(\"The number of strawberry croissants:\", num_strawberry_croissants.value())\nprint(\"The total monthly profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A dessert factory makes cakes and pies. Each cake requires 4 units of sugar and 5 units of flour. Each pie requires 5 units of sugar and 3 units of flour. The factory has 1000 units of sugar and 1200 units of flour agent available. If the revenue per cake made is $4 and the revenue per pie made is $3, how many of each should be made to maximize revenue?",
        "formatted_answers": "The number of cakes to make: ?\nThe number of pies to make: ?\nThe maximum revenue: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_cakes = LpVariable(\"NumCakes\", lowBound=0, cat='Integer') # number of cakes made\nnum_pies = LpVariable(\"NumPies\", lowBound=0, cat='Integer') # number of pies made\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DessertFactoryRevenue\", LpMaximize)\n\n# Define the objective function\nobjective = 4 * num_cakes + 3 * num_pies\nproblem += objective # maximize the total revenue from cakes and pies\n\n# Define the constraints\nproblem += 4 * num_cakes + 5 * num_pies <= 1000 # sugar constraint\nproblem += 5 * num_cakes + 3 * num_pies <= 1200 # flour constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of cakes to make:\", num_cakes.value())\nprint(\"The number of pies to make:\", num_pies.value())\nprint(\"The maximum revenue:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A fashion company produces two types of handbags using skilled and unskilled labor. The productivity and cost of labor vary between the two types of labor. The following table shows the details.\nTable (Productivity and labor cost per hour for handbags):\n| Handbag Type | Skilled Labor (Premium Bags) | Unskilled Labor (Regular Bags) |\n| ------------- | ---------------------------- | ----------------------------- |\n| Bags/hour    | 0.2                          | 0.5                           |\n| Cost/hour    | $30                          | $15                           |\nThe company aims to maximize the number of handbags produced while keeping labor costs within budget. The weekly budget for labor costs cannot exceed $6000. At least 40 premium bags and 100 regular bags need to be produced weekly. The company can allocate a maximum of 150 hours for skilled labor and 200 hours for unskilled labor per week. How should the company allocate the hours of skilled and unskilled labor to maximize the number of handbags produced while not exceeding the labor budget and meeting the production requirements?",
        "formatted_answers": "Hours of skilled labor for premium bags: ?\nHours of unskilled labor for regular bags: ?\nNumber of premium bags produced: ?\nNumber of regular bags produced: ?\nTotal number of handbags produced: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"SkilledLaborHours\", lowBound=0, cat='Integer') # hours of skilled labor for premium bags\nU = LpVariable(\"UnskilledLaborHours\", lowBound=0, cat='Integer') # hours of unskilled labor for regular bags\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeHandbags\", LpMaximize)\n\n# Define the objective function\nobjective = 0.2 * S + 0.5 * U\nproblem += objective # maximize the total number of handbags produced\n\n# Define the constraints\nproblem += 30 * S + 15 * U <= 6000 # the labor cost must be at most $6000\nproblem += 0.2 * S >= 40 # at least 40 premium bags\nproblem += 0.5 * U >= 100 # at least 100 regular bags\nproblem += S <= 150 # maximum of 150 hours for skilled labor\nproblem += U <= 200 # maximum of 200 hours for unskilled labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Hours of skilled labor for premium bags:\", S.value())\nprint(\"Hours of unskilled labor for regular bags:\", U.value())\nprint(\"Number of premium bags produced:\", 0.2 * S.value())\nprint(\"Number of regular bags produced:\", 0.5 * U.value())\nprint(\"Total number of handbags produced:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A small grocery weighs and packages their bulk foods. Each container of nuts takes 10 minutes of weighing and 5 minutes of packaging. Each container of candy takes 5 minutes of weighing and 8 minutes of packaging. The grocery has available 1000 minutes for weighing and 1500 minutes for packaging. If the profit per container of nuts is $5 and the profit per container of candy is $3, how many of each should the grocery prepare to maximize profit?",
        "formatted_answers": "The number of containers of nuts: ?\nThe number of containers of candy: ?\nTotal profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_containers_nuts = LpVariable(\"NumContainersNuts\", lowBound=0, cat='Integer') # number of containers of nuts\nnum_containers_candy = LpVariable(\"NumContainersCandy\", lowBound=0, cat='Integer') # number of containers of candy\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GroceryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_containers_nuts + 3 * num_containers_candy\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 10 * num_containers_nuts + 5 * num_containers_candy <= 1000 # weighing time constraint\nproblem += 5 * num_containers_nuts + 8 * num_containers_candy <= 1500 # packaging time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of containers of nuts:\", num_containers_nuts.value())\nprint(\"The number of containers of candy:\", num_containers_candy.value())\nprint(\"Total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "FarmCo needs to decide how much corn and wheat to plant on their 100-acre farm.\nEach crop has a different profit and requires a different amount of fertilizer and pesticide, as shown in the following Table.\nTable (Profit, fertilizer, and pesticide requirement per acre):\n| Crop  | Profit per Acre | Fertilizer (lbs/acre) | Pesticide (lbs/acre) |\n| ----- | --------------- | --------------------- | -------------------- |\n| Corn  | $500            | 10                    | 5                    |\n| Wheat | $400            | 5                     | 3                    |\nFarmCo aims to maximize the total profit from their crops.\nFarmCo has a total of 800 pounds of fertilizer.\nFarmCo has a total of 300 pounds of pesticide.\nThe farm cannot cultivate more than 100 acres in total.",
        "formatted_answers": "The acres of corn to plant: ?\nThe acres of wheat to plant: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nCorn = LpVariable(\"Corn\", lowBound=0, cat='Integer') # acres of corn\nWheat = LpVariable(\"Wheat\", lowBound=0, cat='Integer') # acres of wheat\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FarmCoProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 500 * Corn + 400 * Wheat\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 10 * Corn + 5 * Wheat <= 800 # total fertilizer constraint\nproblem += 5 * Corn + 3 * Wheat <= 300 # total pesticide constraint\nproblem += Corn + Wheat <= 100 # total acreage constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The acres of corn to plant:\", Corn.value())\nprint(\"The acres of wheat to plant:\", Wheat.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "SweetCo needs to decide on the quantity of two types of candies to produce: Lollipops and Chocolates, while considering machine capacity limits and other constraints. The profit per unit and production time in hours per 100 units for Lollipops and Chocolates are displayed in the following table. There are only 40 production hours available each week. Due to demand, SweetCo must produce at least 200 Lollipops and 100 Chocolates. The production capacity for Chocolates is twice that of Lollipops. Also, SweetCo has a storage limit of 1000 units for each type of candy. How should SweetCo maximize its total profit from these candies?\nTable (Profit per unit and production time for 100 units of candies):\n| Candy Type  | Profit per Unit | Production Time (hours/100 units) |\n| ----------- | --------------- | --------------------------------- |\n| Lollipops   | $2              | 1                                 |\n| Chocolates  | $3              | 2                                 |",
        "formatted_answers": "The number of Lollipops to produce: ?\nThe number of Chocolates to produce: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nL = LpVariable(\"Lollipops\", lowBound=200, upBound=1000, cat='Integer') # number of Lollipops to produce\nC = LpVariable(\"Chocolates\", lowBound=100, upBound=1000, cat='Integer') # number of Chocolates to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CandyProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * L + 3 * C\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += L * 1/100 + C * 2/100 <= 40 # only 40 production hours available each week\nproblem += C <= 2 * L # production capacity for Chocolates is twice that of Lollipops\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of Lollipops to produce:\", L.value())\nprint(\"The number of Chocolates to produce:\", C.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A kitchen appliance store sells only fridges and stoves. They have 1000 sq ft of floor space available. A fridge requires 10 sq ft of floor space while a stove requires 15 sq ft of floor space. The profit per fridge is $400 and the profit per stove is $500. Management requires at least 40% of all appliances in stock be fridges. While a fridge ties up $1000 in capital, a stove ties up $1200 in capital. The store wants to have a maximum of $40000 worth of capital tied up at any time. Formulate a LP in order to maximize the store's profit.",
        "formatted_answers": "The number of fridges in stock: ?\nThe number of stoves in stock: ?\nThe total profit from selling appliances: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"FridgesInStock\", lowBound=0, cat='Integer') # number of fridges in stock\ny = LpVariable(\"StovesInStock\", lowBound=0, cat='Integer') # number of stoves in stock\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"KitchenApplianceProfitMaximization\", LpMaximize)\n\n# Define the objective function\nproblem += 400 * x + 500 * y # maximize the total profit from selling appliances\n\n# Define the constraints\nproblem += 10 * x + 15 * y <= 1000 # floor space constraint\nproblem += 1000 * x + 1200 * y <= 40000 # capital constraint\nproblem += x - 0.4 * (x + y) >= 0 # fridge proportion constraint, rewritten from x >= 0.4(x + y) to x - 0.4x - 0.4y >= 0\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of fridges in stock:\", x.value())\nprint(\"The number of stoves in stock:\", y.value())\nprint(\"The total profit from selling appliances:\", 400 * x.value() + 500 * y.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A small company is planning its advertising campaign, which includes TV, radio, and online ads.\nThe table below provides information about the cost and estimated number of new customers each type of ad is expected to bring in.\nTable (Cost and estimated new customers provided by each type of ad):\n| Ad Type | Cost per Ad | Estimated New Customers |\n| ------- | ----------- | ----------------------- |\n| TV      | $1,200      | 80                      |\n| Radio   | $400        | 30                      |\n| Online  | $100        | 10                      |\nThe company's goal is to maximize the number of new customers while staying within a budget.\nThe advertising budget is not to exceed $20,000.\nThe company wants to ensure a diverse advertising strategy by not spending more than 50% of the budget on any one type of ad.\nThe company wants to run at least 10 TV ads and at least 15 online ads.",
        "formatted_answers": "The number of TV ads: ?\nThe number of radio ads: ?\nThe number of online ads: ?\nThe number of new customers: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nTV = LpVariable(\"TV\", lowBound=10, cat='Integer') # number of TV ads\nRadio = LpVariable(\"Radio\", lowBound=0, cat='Integer') # number of radio ads\nOnline = LpVariable(\"Online\", lowBound=15, cat='Integer') # number of online ads\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AdvertisingCampaign\", LpMaximize)\n\n# Define the objective function\nobjective = 80 * TV + 30 * Radio + 10 * Online\nproblem += objective # maximize the number of new customers\n\n# Define the constraints\nproblem += 1200 * TV + 400 * Radio + 100 * Online <= 20000 # budget constraint\nproblem += 1200 * TV <= 0.5 * 20000 # no more than 50% of budget on TV ads\nproblem += 400 * Radio <= 0.5 * 20000 # no more than 50% of budget on Radio ads\nproblem += 100 * Online <= 0.5 * 20000 # no more than 50% of budget on Online ads\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of TV ads:\", TV.value())\nprint(\"The number of radio ads:\", Radio.value())\nprint(\"The number of online ads:\", Online.value())\nprint(\"The number of new customers:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A clothing store is hosting a sale and has a total of 500 items available for customers to purchase. Each shirt uses 2 units of fabric, each pair of pants uses 3 units of fabric, and each dress uses 5 units of fabric. The clothing store has 1200 units of fabric available for the sale. The store has a total of 300 hours available for customer assistance during the sale. Each shirt requires 0.5 hours of assistance, each pair of pants requires 0.75 hours, and each dress requires 1 hour. The store makes a profit of $15 on each shirt, $25 on each pair of pants, and $40 on each dress. How many of each item should the store sell to maximize profit during the sale?",
        "formatted_answers": "The number of shirts to sell: ?\nThe number of pants to sell: ?\nThe number of dresses to sell: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_shirts = LpVariable(\"NumShirts\", lowBound=0, cat='Integer') # number of shirts\nnum_pants = LpVariable(\"NumPants\", lowBound=0, cat='Integer') # number of pants\nnum_dresses = LpVariable(\"NumDresses\", lowBound=0, cat='Integer') # number of dresses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClothingStoreProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * num_shirts + 25 * num_pants + 40 * num_dresses\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * num_shirts + 3 * num_pants + 5 * num_dresses <= 1200 # fabric constraint\nproblem += 0.5 * num_shirts + 0.75 * num_pants + num_dresses <= 300 # customer assistance hours constraint\nproblem += num_shirts + num_pants + num_dresses <= 500 # total items constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of shirts to sell:\", num_shirts.value())\nprint(\"The number of pants to sell:\", num_pants.value())\nprint(\"The number of dresses to sell:\", num_dresses.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A clothing store is hosting a sale and has a total of 500 items available for customers to purchase. Each shirt weighs 0.2 kg, each pair of pants weighs 0.5 kg, and each dress weighs 0.8 kg. The store's maximum weight capacity for the sale is 200 kg. The store has a limited number of pants available for sale, with a maximum of 150 pairs. The profit per shirt is $20, the profit per pair of pants is $30, and the profit per dress is $50. How many of each item should be sold to maximize the profit during the sale?",
        "formatted_answers": "The number of shirts to sell: ?\nThe number of pants to sell: ?\nThe number of dresses to sell: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_shirts = LpVariable(\"NumShirts\", lowBound=0, cat='Integer') # number of shirts\nnum_pants = LpVariable(\"NumPants\", lowBound=0, upBound=150, cat='Integer') # number of pants\nnum_dresses = LpVariable(\"NumDresses\", lowBound=0, cat='Integer') # number of dresses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClothingSale\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * num_shirts + 30 * num_pants + 50 * num_dresses\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 0.2 * num_shirts + 0.5 * num_pants + 0.8 * num_dresses <= 200 # the weight must be at most 200 kg\nproblem += num_pants <= 150 # the number of pants must be at most 150\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of shirts to sell:\", num_shirts.value())\nprint(\"The number of pants to sell:\", num_pants.value())\nprint(\"The number of dresses to sell:\", num_dresses.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bakery specializes in producing two types of bread: whole wheat and sourdough. Each type of bread requires different baking times in the oven.\nThe following table shows the profit per batch and the baking time required for each type of bread.\nTable (Profit per batch and baking time for two types of bread):\n| Bread Type    | Profit per Batch | Baking Time (hours) |\n| ------------- | ---------------- | ------------------- |\n| Whole Wheat   | $20              | 1                   |\n| Sourdough     | $30              | 2                   |\nThe bakery aims to maximize its total profit from the batches of bread produced.\nThe bakery's oven can operate for up to 16 hours each day.\nDue to demand, the bakery must produce at least 3 batches of whole wheat bread and at least 2 batches of sourdough bread per day.\nThe bakery has decided to produce no more than twice as many whole wheat batches as sourdough batches to maintain variety.",
        "formatted_answers": "The number of batches of whole wheat bread: ?\nThe number of batches of sourdough bread: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW = LpVariable(\"WholeWheatBatches\", lowBound=3, cat='Integer') # number of batches of whole wheat bread\nS = LpVariable(\"SourdoughBatches\", lowBound=2, cat='Integer') # number of batches of sourdough bread\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * W + 30 * S\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += W + 2 * S <= 16 # oven operation time constraint\nproblem += W >= 3 # minimum whole wheat batches constraint\nproblem += S >= 2 # minimum sourdough batches constraint\nproblem += W <= 2 * S # variety maintenance constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of batches of whole wheat bread:\", W.value())\nprint(\"The number of batches of sourdough bread:\", S.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bakery specializes in two types of bread: white and whole grain. The bakery can produce up to 200 loaves of bread per day. The bakery has calculated the profits and production times for each type of bread as shown in the following table. The bakery operates for 8 hours each day, and there are 60 minutes in an hour. Due to health trends, the bakery wants to ensure that at least 50% of the bread produced is whole grain. To meet a special contract, the bakery must produce at least 60 loaves of white bread per day. The bakery wants to maximize its daily profit from bread sales.\nTable (Profits and production times for each type of bread per loaf):\n| Bread Type   | Profit per Loaf | Production Time (minutes) |\n| ------------ | --------------- | ------------------------- |\n| White        | $1.50           | 3                         |\n| Whole Grain  | $2.00           | 4                         |",
        "formatted_answers": "The number of white bread loaves produced: ?\nThe number of whole grain bread loaves produced: ?\nThe maximum daily profit from bread sales: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW = LpVariable(\"WhiteBreadLoaves\", lowBound=0, cat='Integer') # number of white bread loaves produced\nWG = LpVariable(\"WholeGrainBreadLoaves\", lowBound=0, cat='Integer') # number of whole grain bread loaves produced\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 1.50 * W + 2.00 * WG\nproblem += objective # maximize the daily profit from bread sales\n\n# Define the constraints\nproblem += W + WG <= 200 # the bakery can produce up to 200 loaves of bread per day\nproblem += 3 * W + 4 * WG <= 8 * 60 # the bakery operates for 8 hours each day\nproblem += WG >= 0.5 * (W + WG) # at least 50% of the bread produced is whole grain\nproblem += W >= 60 # the bakery must produce at least 60 loaves of white bread per day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of white bread loaves produced:\", W.value())\nprint(\"The number of whole grain bread loaves produced:\", WG.value())\nprint(\"The maximum daily profit from bread sales:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Jane goes to a supplement store that sells two powders, Alpha and Beta, for iron and biotin. The cost per scoop of alpha is $1 while the cost per scoop of Beta is $2. A scoop of Alpha contains 5 grams of iron and 20 grams of biotin. A scoop of Beta contains 10 grams if iron and 3 grams of biotin. A doctor has recommended that Jane takes at least 50 grams of iron and 40 grams of biotin daily. Formulate as a LP to minimize cost.",
        "formatted_answers": "The number of scoops of Alpha: ?\nThe number of scoops of Beta: ?\nThe minimum cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"AlphaScoops\", lowBound=0, cat='Continuous') # number of scoops of Alpha\ny = LpVariable(\"BetaScoops\", lowBound=0, cat='Continuous') # number of scoops of Beta\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SupplementCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = x + 2 * y\nproblem += objective # minimize the cost of supplements\n\n# Define the constraints\nproblem += 5 * x + 10 * y >= 50 # iron intake constraint\nproblem += 20 * x + 3 * y >= 40 # biotin intake constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of scoops of Alpha:\", x.value())\nprint(\"The number of scoops of Beta:\", y.value())\nprint(\"The minimum cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A food truck wants to make bean burritos and beef burritos using 5000 grams of lettuce. The profit per bean burrito is $6.5 and the profit per beef burrito is $9. The bean burrito contains 25 grams of lettuce and the beef burrito contains 18 grams of lettuce. The beef burrito is much more popular and at least four times the amount of beef burritos need to be made than the bean burritos. However, a minimum of 5 bean burritos need to be made. How many of each burrito should be made in order to maximize profit?",
        "formatted_answers": "The number of bean burritos: ?\nThe number of beef burritos: ?\nTotal profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bean_burritos = LpVariable(\"NumBeanBurritos\", lowBound=5, cat='Integer') # number of bean burritos\nnum_beef_burritos = LpVariable(\"NumBeefBurritos\", lowBound=0, cat='Integer') # number of beef burritos\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FoodTruckProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 6.5 * num_bean_burritos + 9 * num_beef_burritos\nproblem += objective # maximize the total profit from selling burritos\n\n# Define the constraints\nproblem += 25 * num_bean_burritos + 18 * num_beef_burritos <= 5000 # lettuce constraint\nproblem += num_beef_burritos >= 4 * num_bean_burritos # beef burrito popularity constraint\nproblem += num_bean_burritos >= 5 # minimum bean burrito constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of bean burritos:\", num_bean_burritos.value())\nprint(\"The number of beef burritos:\", num_beef_burritos.value())\nprint(\"Total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bakery makes bread and cakes using two types of ovens: convection and industrial. The following Table indicates the baking times and profit for each item in each type of oven.\nTable (Baking times in hours and profit per item):\n| Item Type | Convection Oven (time per item) | Industrial Oven (time per item) | Profit per Item |\n| --------- | ------------------------------ | ------------------------------ | --------------- |\n| Bread     | 0.1                            | 0.2                            | $2              |\n| Cake      | 0.3                            | 0.5                            | $5              |\n\nThe bakery seeks to maximize its daily profit from the items baked. The convection oven is available for up to 8 hours a day, and the industrial oven is available for up to 6 hours a day. The bakery must produce at least 40 loaves of bread and 30 cakes each day to meet demand. The bakery has a policy of using the convection oven for cakes no more than four times the hours it uses for bread. To maintain quality, at least 20% of the cakes should be baked in the industrial oven. How should the bakery distribute its baking time between the two ovens to maximize its daily profit while meeting all these constraints?",
        "formatted_answers": "Hours the convection oven is used: ?\nHours the industrial oven is used: ?\nTotal profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nHc = LpVariable(\"HoursConvectionOven\", lowBound=0, cat='Continuous') # hours the convection oven is used\nHi = LpVariable(\"HoursIndustrialOven\", lowBound=0, cat='Continuous') # hours the industrial oven is used\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * (Hc * 10 + Hi * 5) + 5 * (Hc * 10/3 + Hi * 2) # Maximize profit\nproblem += objective\n\n# Define the constraints\nproblem += Hc <= 8 # Convection oven availability\nproblem += Hi <= 6 # Industrial oven availability\nproblem += Hc * 10 + Hi * 5 >= 40 # Bread production requirement\nproblem += Hc * 10/3 + Hi * 2 >= 30 # Cake production requirement\nproblem += Hc * 10/3 <= 4 * (Hc * 10) # Convection oven use policy for cakes\nproblem += Hi * 2 >= 0.2 * (Hc * 10/3 + Hi * 2) # Quality policy for cakes in the industrial oven\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Hours the convection oven is used:\", Hc.value())\nprint(\"Hours the industrial oven is used:\", Hi.value())\nprint(\"Total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "XYZ Automobile sells SUV cars and minivans. Two different factories produce these cars. The SUV  car factory can make at most 5 SUV cars per day while the minivan car factory can make at most 3 minivans per day. The company outsources the finishing touches to a third party, which can process at most 5 vehicle of either type per day. If the profit per SUV car is $7500 and the profit per minivan is $4000, how many of each vehicle should the company make to maximize profit?",
        "formatted_answers": "The number of SUV cars to make per day: ?\nThe number of minivans to make per day: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_SUV_cars = LpVariable(\"NumSUVcars\", lowBound=0, cat='Integer') # number of SUV cars made per day\nnum_minivans = LpVariable(\"NumMinivans\", lowBound=0, cat='Integer') # number of minivans made per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AutomobileProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 7500 * num_SUV_cars + 4000 * num_minivans\nproblem += objective # maximize the total profit from SUV cars and minivans\n\n# Define the constraints\nproblem += num_SUV_cars <= 5 # SUV car factory constraint\nproblem += num_minivans <= 3 # minivan factory constraint\nproblem += num_SUV_cars + num_minivans <= 5 # finishing touches constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of SUV cars to make per day:\", num_SUV_cars.value())\nprint(\"The number of minivans to make per day:\", num_minivans.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Sweet Treats Bakery needs to plan the production of three types of pastries: croissants, muffins, and scones.\nEach batch of pastries requires a certain amount of flour and sugar, and the bakery has a limited supply of these ingredients each day. The table below shows the required amounts per batch.\nTable (Amount of flour and sugar required per batch of pastry):\n| Pastry Type | Flour (kg per batch) | Sugar (kg per batch) |\n| ----------- | --------------------- | -------------------- |\n| Croissants  | 2                     | 1                    |\n| Muffins     | 1                     | 1                    |\n| Scones      | 1.5                   | 0.5                  |\nThe profit per batch is $20 for croissants, $15 for muffins, and $18 for scones. Maximize the total profit.\nThe bakery has only 100kg of flour and 50kg of sugar available per day.\nThe bakery must produce at least 10 batches of each pastry per day to meet customer demands.\nThe oven can bake at most 60 batches of pastries each day.",
        "formatted_answers": "The number of batches of croissants: ?\nThe number of batches of muffins: ?\nThe number of batches of scones: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Croissants\", lowBound=10, cat='Integer') # number of batches of croissants\nM = LpVariable(\"Muffins\", lowBound=10, cat='Integer') # number of batches of muffins\nS = LpVariable(\"Scones\", lowBound=10, cat='Integer') # number of batches of scones\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nproblem += 20 * C + 15 * M + 18 * S # maximize the total profit\n\n# Define the constraints\nproblem += 2 * C + 1 * M + 1.5 * S <= 100 # Flour constraint\nproblem += 1 * C + 1 * M + 0.5 * S <= 50 # Sugar constraint\nproblem += C + M + S <= 60 # Oven capacity constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of batches of croissants:\", C.value())\nprint(\"The number of batches of muffins:\", M.value())\nprint(\"The number of batches of scones:\", S.value())\nprint(\"The total profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A clothing store is hosting a sale and has a total of 500 items available for customers to purchase. Each shirt takes up 2 units of display space, each pair of pants takes up 3 units, and each dress takes up 5 units. The total available display space is 100 units. The store has a limited budget for advertising and can only spend $500 on marketing the sale. The store makes a profit of $15 for each shirt sold, $20 for each pair of pants sold, and $25 for each dress sold. Determine the optimal quantity of each item to sell in order to maximize the total profit.",
        "formatted_answers": "The number of shirts to sell: ?\nThe number of pants to sell: ?\nThe number of dresses to sell: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_shirts = LpVariable(\"NumShirts\", lowBound=0, cat='Integer') # number of shirts\nnum_pants = LpVariable(\"NumPants\", lowBound=0, cat='Integer') # number of pants\nnum_dresses = LpVariable(\"NumDresses\", lowBound=0, cat='Integer') # number of dresses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClothingStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * num_shirts + 20 * num_pants + 25 * num_dresses\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * num_shirts + 3 * num_pants + 5 * num_dresses <= 100 # the display space constraint\nproblem += 5 * num_shirts + 10 * num_pants + 15 * num_dresses <= 500 # the advertising budget constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of shirts to sell:\", num_shirts.value())\nprint(\"The number of pants to sell:\", num_pants.value())\nprint(\"The number of dresses to sell:\", num_dresses.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Bakery Delight produces Whole Wheat and Multigrain bread using two different ovens. Each oven has a maximum capacity of baking 100 loaves per day. The number of loaves each oven can bake per day of each type of bread is shown in the following table.\nTable (The number of loaves baked by each oven per day):\n| Bread Type   | Oven 1 Capacity | Oven 2 Capacity |\n| ------------ | --------------- | --------------- |\n| Whole Wheat  | 50              | 30              |\n| Multigrain   | 40              | 60              |\nThe cost of operating Oven 1 is $200 a day, and Oven 2 is $300 a day. The bakery must produce at least 500 loaves of Whole Wheat and 600 loaves of Multigrain bread per day to meet demand. How should Bakery Delight minimize its total operating costs while fulfilling the bread demand?",
        "formatted_answers": "The number of loaves from oven 1: ?\nThe number of loaves from oven 2: ?\nThe total operating cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nL1 = LpVariable(\"LoavesFromOven1\", lowBound=0, cat='Integer') # number of loaves from oven 1\nL2 = LpVariable(\"LoavesFromOven2\", lowBound=0, cat='Integer') # number of loaves from oven 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 200 * L1 + 300 * L2\nproblem += objective # minimize the total operating cost\n\n# Define the constraints\nproblem += 50 * L1 + 40 * L1 <= 100 # Oven 1 capacity constraint\nproblem += 30 * L2 + 60 * L2 <= 100 # Oven 2 capacity constraint\nproblem += 50 * L1 + 30 * L2 >= 500 # Whole Wheat demand constraint\nproblem += 40 * L1 + 60 * L2 >= 600 # Multigrain demand constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of loaves from oven 1:\", L1.value())\nprint(\"The number of loaves from oven 2:\", L2.value())\nprint(\"The total operating cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A furniture store makes desks and chairs. Two different manufacturers make each item. Manufacturer X can make at most 22 desks a day. Manufacturer Y can make at most 28 chairs a day. Both have to be quality checked by another company, and this company can quality check at most 40 items of either type per day. If the profit per desk is $140 and the profit per chair is $120, how many of each should the company make to maximize profit?",
        "formatted_answers": "The number of desks made by Manufacturer X: ?\nThe number of chairs made by Manufacturer Y: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"Desks\", lowBound=0, cat='Integer') # number of desks made by Manufacturer X\ny = LpVariable(\"Chairs\", lowBound=0, cat='Integer') # number of chairs made by Manufacturer Y\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FurnitureProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 140 * x + 120 * y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += x <= 22 # manufacturer X's production constraint\nproblem += y <= 28 # manufacturer Y's production constraint\nproblem += x + y <= 40 # quality check constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of desks made by Manufacturer X:\", x.value())\nprint(\"The number of chairs made by Manufacturer Y:\", y.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "BrightLight Inc. produces two types of LED bulbs using two different machines.\nEach machine can produce a certain number of standard (S) or premium (P) LED bulbs per hour. The following table shows the production capabilities and power consumption.\nTable (Number of LED bulbs produced per hour and power consumption for each bulb type on each machine):\n| Bulb Type | Machine 1 Production | Machine 2 Production | Power Consumption per Hour (Machine 1) | Power Consumption per Hour (Machine 2) |\n| --------- | -------------------- | -------------------- | -------------------------------------- | -------------------------------------- |\n| Standard  | 50                   | 30                   | 5 kWh                                  | 4 kWh                                  |\n| Premium   | 20                   | 40                   | 8 kWh                                  | 6 kWh                                  |\nEach hour of operation costs $10 for Machine 1 and $12 for Machine 2. Minimize the total cost of power consumption.\nEach machine can operate for a maximum of 8 hours per day.\nThere is a daily demand that must be met: at least 2000 standard LED bulbs and 1000 premium LED bulbs.\nThe company has a policy to produce at least twice as many standard bulbs as premium bulbs.",
        "formatted_answers": "The number of standard LED bulbs produced: ?\nThe number of premium LED bulbs produced: ?\nThe total cost of power consumption: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"StandardLEDs\", lowBound=0, cat='Integer') # number of standard LED bulbs produced\nP = LpVariable(\"PremiumLEDs\", lowBound=0, cat='Integer') # number of premium LED bulbs produced\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizePowerCost\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * S + 8 * P + 10 + 12\nproblem += objective # minimize the total cost of power consumption\n\n# Define the constraints\nproblem += 50 * S <= 8 * 60 # Machine 1 can operate for a maximum of 8 hours per day\nproblem += 30 * S + 40 * P <= 8 * 60 # Machine 2 can operate for a maximum of 8 hours per day\nproblem += 50 * S + 30 * S >= 2000 # daily demand for standard LED bulbs\nproblem += 20 * P + 40 * P >= 1000 # daily demand for premium LED bulbs\nproblem += S >= 2 * P # produce at least twice as many standard bulbs as premium bulbs\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of standard LED bulbs produced:\", S.value())\nprint(\"The number of premium LED bulbs produced:\", P.value())\nprint(\"The total cost of power consumption:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A clothing store is hosting a sale and has a total of 500 items available for customers to purchase. Each shirt requires 2 units of fabric, each pair of pants requires 3 units of fabric, and each dress requires 4 units of fabric. The store has 1500 units of fabric available for the sale. Each shirt weighs 0.5 kg, each pair of pants weighs 0.8 kg, and each dress weighs 1.5 kg. The store has a weight capacity of 800 kg for the sale. The store makes a profit of $15 on each shirt, $25 on each pair of pants, and $40 on each dress. How many of each item should the store sell to maximize profit during the sale?",
        "formatted_answers": "The number of shirts to sell: ?\nThe number of pants to sell: ?\nThe number of dresses to sell: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_shirts = LpVariable(\"NumShirts\", lowBound=0, cat='Integer') # number of shirts\nnum_pants = LpVariable(\"NumPants\", lowBound=0, cat='Integer') # number of pants\nnum_dresses = LpVariable(\"NumDresses\", lowBound=0, cat='Integer') # number of dresses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClothingStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * num_shirts + 25 * num_pants + 40 * num_dresses\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * num_shirts + 3 * num_pants + 4 * num_dresses <= 1500 # fabric constraint\nproblem += 0.5 * num_shirts + 0.8 * num_pants + 1.5 * num_dresses <= 800 # weight constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of shirts to sell:\", num_shirts.value())\nprint(\"The number of pants to sell:\", num_pants.value())\nprint(\"The number of dresses to sell:\", num_dresses.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "GreenTech is a company that installs solar panels and wind turbines. They have two installation teams: Solar Team and Wind Team.\nThe table below shows the average revenue and time required for each type of installation.\nTable (Average revenue and time required for installations):\n| Installation Type | Time Required (days/installation) | Revenue ($/installation) |\n| ----------------- | --------------------------------- | ------------------------ |\n| Solar Panels      | 5                                 | 3000                     |\n| Wind Turbines     | 7                                 | 4500                     |\nGreenTech's goal is to maximize its total revenue based on the installations completed.\nGreenTech has a total of 80 days of installation time available between both teams this month.\nDue to limited equipment, the Wind Team can complete a maximum of 5 wind turbine installations per month.\nThe demand for solar panel installations is at least 30% higher than wind turbine installations.\nTo satisfy existing contracts, at least 3 solar panel installations must be completed this month.\nThe company has a policy to ensure diversification of services, so the number of solar panel installations cannot exceed twice the number of wind turbine installations.",
        "formatted_answers": "The number of solar panel installations: ?\nThe number of wind turbine installations: ?\nThe total revenue: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"SolarPanelInstallations\", lowBound=0, cat='Integer') # number of solar panel installations\nW = LpVariable(\"WindTurbineInstallations\", lowBound=0, cat='Integer') # number of wind turbine installations\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeRevenue\", LpMaximize)\n\n# Define the objective function\nproblem += 3000 * S + 4500 * W # maximize the total revenue\n\n# Define the constraints\nproblem += 5 * S + 7 * W <= 80 # total installation time available\nproblem += W <= 5 # maximum wind turbine installations\nproblem += S >= 1.3 * W # demand for solar panel installations\nproblem += S >= 3 # minimum solar panel installations required\nproblem += S <= 2 * W # diversification of services policy\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of solar panel installations:\", S.value())\nprint(\"The number of wind turbine installations:\", W.value())\nprint(\"The total revenue:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "FastCargo Shipping Company is planning the optimal allocation of its fleet of trucks and planes for deliveries.\nThe cost of operation and capacity of each mode of transport are listed in the following Table.\nTable (Operating cost and capacity for trucks and planes):\n| Transport Type | Operating Cost per Trip | Capacity per Trip (packages) |\n| -------------- | ----------------------- | ---------------------------- |\n| Truck          | $200                    | 500                          |\n| Plane          | $2,000                  | 4,000                        |\nFastCargo wants to minimize the total operating cost while meeting the delivery capacity demand.\nThe company needs to deliver at least 20,000 packages each day.\nThere are only 15 trucks and 5 planes available for deployment.\nDue to budget constraints, the daily operating cost should not exceed $30,000.\nAt least one plane must be used each day for long-distance deliveries.",
        "formatted_answers": "The number of trucks to use: ?\nThe number of planes to use: ?\nThe total operating cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nTrucks = LpVariable(\"Trucks\", lowBound=0, cat='Integer') # number of trucks\nPlanes = LpVariable(\"Planes\", lowBound=0, cat='Integer') # number of planes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DeliveryOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 200 * Trucks + 2000 * Planes\nproblem += objective # minimize the total operating cost\n\n# Define the constraints\nproblem += 500 * Trucks + 4000 * Planes >= 20000 # deliver at least 20,000 packages\nproblem += Trucks <= 15 # only 15 trucks available\nproblem += Planes <= 5 # only 5 planes available\nproblem += 200 * Trucks + 2000 * Planes <= 30000 # operating cost should not exceed $30,000\nproblem += Planes >= 1 # at least one plane must be used\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of trucks to use:\", Trucks.value())\nprint(\"The number of planes to use:\", Planes.value())\nprint(\"The total operating cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Delish Bakery offers 3 different pastries: croissants, muffins, and scones. The bakery can bake a certain number each day.\nEach pastry requires a different amount of baking time in hours and generates a different profit. The following Table shows the baking time and profit for each pastry type per unit.\nTable (Baking time in hours and profit for each pastry per unit):\n| Pastry Type | Baking Time (hours/unit) | Profit ($/unit) |\n| ----------- | ------------------------- | --------------- |\n| Croissants  | 0.3                       | 1.50            |\n| Muffins     | 0.2                       | 1.20            |\n| Scones      | 0.25                      | 1.70            |\nThe bakery aims to maximize the daily profit from baking these pastries.\nThe bakery operates for 8 hours a day.\nDue to oven capacity, the bakery can bake at most 20 croissants, 30 muffins, and 25 scones each day.\nThe demand requires at least 10 croissants, 5 muffins, and 8 scones to be baked each day.\nThe bakery wants to ensure that muffins make up at least 25% of the total number of pastries baked.",
        "formatted_answers": "The number of croissants baked per day: ?\nThe number of muffins baked per day: ?\nThe number of scones baked per day: ?\nThe maximum daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Croissants\", lowBound=10, upBound=20, cat='Integer') # number of croissants baked per day\nM = LpVariable(\"Muffins\", lowBound=5, upBound=30, cat='Integer') # number of muffins baked per day\nS = LpVariable(\"Scones\", lowBound=8, upBound=25, cat='Integer') # number of scones baked per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 1.50 * C + 1.20 * M + 1.70 * S\nproblem += objective # maximize the daily profit\n\n# Define the constraints\nproblem += 0.3 * C + 0.2 * M + 0.25 * S <= 8 # bakery operates for 8 hours a day\nproblem += C >= 10 # at least 10 croissants\nproblem += M >= 5 # at least 5 muffins\nproblem += S >= 8 # at least 8 scones\nproblem += M >= 0.25 * (C + M + S) # muffins make up at least 25% of the total pastries\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of croissants baked per day:\", C.value())\nprint(\"The number of muffins baked per day:\", M.value())\nprint(\"The number of scones baked per day:\", S.value())\nprint(\"The maximum daily profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "SweetDelight is planning the production of two types of chocolate boxes: Deluxe and Standard. The profit per box and the time needed to produce each type of chocolate box are given in the following Table.\nTable (Profit per box and production time per box):\n| Chocolate Box Type | Profit per Box | Production Time per Box (in minutes) |\n| ------------------ | -------------- | ------------------------------------- |\n| Deluxe             | $8             | 6                                     |\n| Standard           | $5             | 3                                     |\nSweetDelight aims to maximize its weekly profit from the production of these chocolate boxes. The factory operates for a total of 40 hours per week. Due to demand forecasts, SweetDelight needs to produce at least twice as many Standard boxes as Deluxe boxes each week. The storage space limits the total number of chocolate boxes (Deluxe and Standard combined) to 500 units per week. Market research indicates that at least 100 Deluxe boxes should be produced to maintain brand presence.",
        "formatted_answers": "The number of Deluxe chocolate boxes: ?\nThe number of Standard chocolate boxes: ?\nThe maximum weekly profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nD = LpVariable(\"DeluxeChocolateBoxes\", lowBound=0, cat='Integer') # number of Deluxe chocolate boxes\nS = LpVariable(\"StandardChocolateBoxes\", lowBound=0, cat='Integer') # number of Standard chocolate boxes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChocolateBoxProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 8 * D + 5 * S\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 6 * D + 3 * S <= 40 * 60 # the factory operates for a total of 40 hours per week\nproblem += S >= 2 * D # produce at least twice as many Standard boxes as Deluxe boxes\nproblem += D + S <= 500 # storage space limits the total number of chocolate boxes to 500 units per week\nproblem += D >= 100 # at least 100 Deluxe boxes should be produced\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of Deluxe chocolate boxes:\", D.value())\nprint(\"The number of Standard chocolate boxes:\", S.value())\nprint(\"The maximum weekly profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A gift store has to send out their gifts. They can send the gifts using the postal service which can take 100 gifts per pickup or by hiring vans which can take 80 gifts each. The cost per pickup from the postal office is $50 and the cost per van is $40. In addition the number of vans cannot exceed the number of postal service pickups. If the store has a budget of $1000, how should they spend their money to maximize the number of gifts that can be sent?",
        "formatted_answers": "The number of postal service pickups: ?\nThe number of vans hired: ?\nThe number of gifts transported: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_postal_pickups = LpVariable(\"NumPostalPickups\", lowBound=0, cat='Integer') # number of pickups using postal service\nnum_vans_hired = LpVariable(\"NumVansHired\", lowBound=0, cat='Integer') # number of vans hired\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GiftTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 100 * num_postal_pickups + 80 * num_vans_hired\nproblem += objective # maximize the total number of gifts transported\n\n# Define the constraints\nproblem += 50 * num_postal_pickups + 40 * num_vans_hired <= 1000 # budget constraint\nproblem += num_vans_hired <= num_postal_pickups # number of vans must be less than or equal to number of postal pickups\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of postal service pickups:\", num_postal_pickups.value())\nprint(\"The number of vans hired:\", num_vans_hired.value())\nprint(\"The number of gifts transported:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "GreenTech has a budget to invest in renewable energy projects, focusing on Solar, Wind, and Hydro projects.\nThe expected annual return rate and minimum investment required for each project type are shown in the following Table.\nTable (Expected annual return rate and minimum investment for renewable energy projects):\n| Project Type | Expected Annual Return Rate | Minimum Investment |\n|--------------|----------------------------|--------------------|\n| Solar        | 8%                         | $20,000            |\n| Wind         | 10%                        | $50,000            |\n| Hydro        | 7%                         | $30,000            |\nGreenTech wants to maximize the total expected annual return from its investments.\nThe total budget for investment is $2,000,000.\nInvest at least $100,000 in each project type to diversify the portfolio.\nThe investment in wind projects should not exceed twice the investment in solar projects.",
        "formatted_answers": "Amount invested in solar projects: ?\nAmount invested in wind projects: ?\nAmount invested in hydro projects: ?\nTotal expected annual return: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nSolar = LpVariable(\"Solar\", lowBound=100000, cat='Continuous') # amount invested in solar projects\nWind = LpVariable(\"Wind\", lowBound=100000, cat='Continuous') # amount invested in wind projects\nHydro = LpVariable(\"Hydro\", lowBound=100000, cat='Continuous') # amount invested in hydro projects\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"InvestmentInRenewableEnergy\", LpMaximize)\n\n# Define the objective function\nobjective = 0.08 * Solar + 0.10 * Wind + 0.07 * Hydro\nproblem += objective # maximize the total expected annual return\n\n# Define the constraints\nproblem += Solar + Wind + Hydro <= 2000000 # total budget for investment\nproblem += Wind <= 2 * Solar # investment in wind projects should not exceed twice the investment in solar projects\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Amount invested in solar projects:\", Solar.value())\nprint(\"Amount invested in wind projects:\", Wind.value())\nprint(\"Amount invested in hydro projects:\", Hydro.value())\nprint(\"Total expected annual return:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A food truck wants to make sausages using shrimp and beef. The mixture needs to contain at least 20 units of protein and 25 units of fat. Shrimp costs $36 per kg and beef costs $40 per kg. Per kilogram, shrimp contains 2.5 units of protein and 3 units of fat. Per kilogram, beef contains 4 units of protein and 2.5 units of fat. Determine the minimum cost of the mixture.",
        "formatted_answers": "Number of kilograms of shrimp: ?\nNumber of kilograms of beef: ?\nMinimum cost of the mixture: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"ShrimpKilograms\", lowBound=0, cat='Continuous') # number of kilograms of shrimp\ny = LpVariable(\"BeefKilograms\", lowBound=0, cat='Continuous') # number of kilograms of beef\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimumCostMixture\", LpMinimize)\n\n# Define the objective function\nobjective = 36 * x + 40 * y\nproblem += objective # minimize the cost of the mixture\n\n# Define the constraints\nproblem += 2.5 * x + 4 * y >= 20 # protein constraint\nproblem += 3 * x + 2.5 * y >= 25 # fat constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Number of kilograms of shrimp:\", x.value())\nprint(\"Number of kilograms of beef:\", y.value())\nprint(\"Minimum cost of the mixture:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A company is deciding how many units of two products, A and B, to manufacture. Each product must go through a two-step process: assembly and testing.\nThe table below shows the number of hours required for assembly and testing for each product and the profit per unit.\nTable (Hours and profit per unit):\n| Product | Assembly Hours per Unit | Testing Hours per Unit | Profit per Unit |\n| ------- | ----------------------- | ---------------------- | --------------- |\n| A       | 3                       | 1                      | $50             |\n| B       | 2                       | 2                      | $40             |\nThe company's goal is to maximize its total profit.\nThe assembly department has a total of 120 available hours per week.\nThe testing department has a total of 80 available hours per week.\nThe company has a contract that requires them to produce at least 20 units of product A each week.\nDue to storage space limitations, the company can only store a maximum of 50 units of product B each week.",
        "formatted_answers": "The number of units of product A to manufacture: ?\nThe number of units of product B to manufacture: ?\nThe maximum total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA = LpVariable(\"A\", lowBound=20, cat='Integer') # number of units of product A\nB = LpVariable(\"B\", lowBound=0, upBound=50, cat='Integer') # number of units of product B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 50 * A + 40 * B, \"Total Profit\"\n\n# Define the constraints\nproblem += 3 * A + 2 * B <= 120, \"Assembly Hours Constraint\"\nproblem += 1 * A + 2 * B <= 80, \"Testing Hours Constraint\"\nproblem += A >= 20, \"Minimum Product A Constraint\"\nproblem += B <= 50, \"Maximum Product B Constraint\"\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of units of product A to manufacture:\", A.value())\nprint(\"The number of units of product B to manufacture:\", B.value())\nprint(\"The maximum total profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Speedy Delivery has a fleet of delivery trucks and vans. They need to decide how many of each to operate to meet delivery demands.\nThe carrying capacities and operational costs for trucks and vans are shown in the following Table.\nTable (Carrying capacity and weekly operational cost for trucks and vans):\n| Vehicle Type | Carrying Capacity (units) | Weekly Operational Cost |\n| ------------ | ------------------------- | ----------------------- |\n| Truck        | 800                       | $2000                   |\n| Van          | 200                       | $500                    |\nSpeedy Delivery aims to minimize the operational costs while ensuring all deliveries are made.\nThe company can operate a maximum of 10 trucks and 25 vans each week.\nEach week, at least 5000 units must be delivered to meet demands.\nDue to maintenance and staffing, the company must operate at least 2 trucks and 3 vans each week.\nInsurance costs are $150 per truck and $70 per van per week. The total insurance costs must not exceed $4000 per week.",
        "formatted_answers": "The number of trucks to operate: ?\nThe number of vans to operate: ?\nThe total operational cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nT = LpVariable(\"Trucks\", lowBound=2, upBound=10, cat='Integer') # number of trucks\nV = LpVariable(\"Vans\", lowBound=3, upBound=25, cat='Integer') # number of vans\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SpeedyDelivery\", LpMinimize)\n\n# Define the objective function\nobjective = 2000 * T + 500 * V\nproblem += objective # minimize the operational costs\n\n# Define the constraints\nproblem += 800 * T + 200 * V >= 5000 # at least 5000 units must be delivered\nproblem += 150 * T + 70 * V <= 4000 # total insurance costs must not exceed $4000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of trucks to operate:\", T.value())\nprint(\"The number of vans to operate:\", V.value())\nprint(\"The total operational cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A toy company can build two factory types, a medium sized factory and a small factory. A medium sized factory can make 50 toys per day and requires 3 operators. A small factory can make 35 toys per day and requires 2 operators. The company must make at least 250 toys per day but they only have available 16 operators. How many of each factory should the company build to minimize the total number of factories?",
        "formatted_answers": "The number of medium sized factories: ?\nThe number of small factories: ?\nThe total number of factories: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_medium_factory = LpVariable(\"NumMediumFactory\", lowBound=0, cat='Integer') # number of medium sized factory\nnum_small_factory = LpVariable(\"NumSmallFactory\", lowBound=0, cat='Integer') # number of small factory\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ToyFactory\", LpMinimize)\n\n# Define the objective function\nobjective = num_medium_factory + num_small_factory\nproblem += objective # minimize the total number of factories\n\n# Define the constraints\nproblem += 50 * num_medium_factory + 35 * num_small_factory >= 250 # the company must make at least 250 toys per day\nproblem += 3 * num_medium_factory + 2 * num_small_factory <= 16 # they only have available 16 operators\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of medium sized factories:\", num_medium_factory.value())\nprint(\"The number of small factories:\", num_small_factory.value())\nprint(\"The total number of factories:\", objective.value()\nprint(\"## end solving\")\n)"
    },
    {
        "question": "A bakery produces bread and pastries using two ovens. The bakery operates for 8 hours a day.\nThe bakery produces different quantities of bread and pastries depending on the oven used. The following table shows the production per hour for each oven.\nTable (The number of items produced per hour by each oven):\n| Product Type | Oven 1 | Oven 2 |\n| ------------ | ------ | ------ |\n| Bread        | 50     | 40     |\n| Pastries     | 30     | 35     |\nThe profit from each loaf of bread is $0.30, and the profit from each pastry is $0.50. Maximize the total daily profit.\nEach oven can operate for a maximum of 8 hours a day.\nThe demand requires at least 300 loaves of bread and at least 200 pastries per day.\nOven 1 is more efficient for bread and must be used for bread for at least 3 hours each day.\nDue to a contract with a local restaurant, the bakery must produce at least twice as many loaves of bread as pastries.",
        "formatted_answers": "Number of hours oven 1 is used for bread: ?\nNumber of hours oven 1 is used for pastries: ?\nNumber of hours oven 2 is used for bread: ?\nNumber of hours oven 2 is used for pastries: ?\nTotal daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nB1 = LpVariable(\"B1\", lowBound=0, cat='Continuous') # number of hours oven 1 is used for bread\nP1 = LpVariable(\"P1\", lowBound=0, cat='Continuous') # number of hours oven 1 is used for pastries\nB2 = LpVariable(\"B2\", lowBound=0, cat='Continuous') # number of hours oven 2 is used for bread\nP2 = LpVariable(\"P2\", lowBound=0, cat='Continuous') # number of hours oven 2 is used for pastries\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 0.30 * (50 * B1 + 40 * B2) + 0.50 * (30 * P1 + 35 * P2)\nproblem += objective # maximize the total daily profit\n\n# Define the constraints\nproblem += B1 + P1 <= 8 # oven 1 can operate for a maximum of 8 hours a day\nproblem += B2 + P2 <= 8 # oven 2 can operate for a maximum of 8 hours a day\nproblem += 50 * B1 + 40 * B2 >= 300 # at least 300 loaves of bread per day\nproblem += 30 * P1 + 35 * P2 >= 200 # at least 200 pastries per day\nproblem += B1 >= 3 # oven 1 must be used for bread for at least 3 hours each day\nproblem += 50 * B1 + 40 * B2 >= 2 * (30 * P1 + 35 * P2) # produce at least twice as many loaves of bread as pastries\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"Number of hours oven 1 is used for bread:\", B1.value())\nprint(\"Number of hours oven 1 is used for pastries:\", P1.value())\nprint(\"Number of hours oven 2 is used for bread:\", B2.value())\nprint(\"Number of hours oven 2 is used for pastries:\", P2.value())\nprint(\"Total daily profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "You are playing a game where you can catch fish or birds. Each fish caught is 4 points and each bird caught is 6 points. You have to catch at least 6 fishes and at least 2 birds to progress. However, you only have time to catch at most 9 fishes and at most 4 birds. In total, you can catch no more than 12 animals. How many of each type of animal should you catch to maximize your points?",
        "formatted_answers": "The number of fish to catch: ?\nThe number of birds to catch: ?\nThe total points: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_fish = LpVariable(\"NumFish\", lowBound=6, upBound=9, cat='Integer') # number of fish caught\nnum_birds = LpVariable(\"NumBirds\", lowBound=2, upBound=4, cat='Integer') # number of birds caught\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizePoints\", LpMaximize)\n\n# Define the objective function\nobjective = 4 * num_fish + 6 * num_birds\nproblem += objective # maximize the total points\n\n# Define the constraints\nproblem += num_fish >= 6 # minimum number of fish\nproblem += num_birds >= 2 # minimum number of birds\nproblem += num_fish <= 9 # maximum number of fish\nproblem += num_birds <= 4 # maximum number of birds\nproblem += num_fish + num_birds <= 12 # total number of animals\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of fish to catch:\", num_fish.value())\nprint(\"The number of birds to catch:\", num_birds.value())\nprint(\"The total points:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "FabriTech produces two types of fabric, cotton and silk, using both manual and automated looms. FabriTech can produce fabric using either manual or automated looms, with varying efficiency and cost. The following table shows the number of yards produced per hour and the cost per hour for each type of fabric and loom.\nTable (Yards produced per hour and cost per hour for each type of fabric and loom):\n| Fabric Type | Manual Loom | Automated Loom |\n|-------------|-------------|----------------|\n| Cotton      | 10 yards    | 30 yards       |\n| Silk        | 5 yards     | 20 yards       |\n| Cost per Hour | $50       | $100           |\nThe cost of running a manual loom is $50 per hour, and the cost of running an automated loom is $100 per hour. Minimize the total cost of production. The manual loom can be operated for up to 40 hours a week, and the automated loom for up to 60 hours a week. Each week, at least 500 yards of cotton and 300 yards of silk must be produced to meet demand. Manual looms can only produce a maximum of 200 yards of silk fabric per week.",
        "formatted_answers": "The yards of cotton fabric: ?\nThe yards of silk fabric: ?\nHours on manual loom for cotton: ?\nHours on manual loom for silk: ?\nHours on automated loom for cotton: ?\nHours on automated loom for silk: ?\nThe total cost of production: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"YardsOfCotton\", lowBound=0, cat='Integer') # yards of cotton fabric\nS = LpVariable(\"YardsOfSilk\", lowBound=0, cat='Integer') # yards of silk fabric\nHours_Manual_Cotton = LpVariable(\"HoursManualCotton\", lowBound=0, cat='Continuous')\nHours_Manual_Silk = LpVariable(\"HoursManualSilk\", lowBound=0, cat='Continuous')\nHours_Automated_Cotton = LpVariable(\"HoursAutomatedCotton\", lowBound=0, cat='Continuous')\nHours_Automated_Silk = LpVariable(\"HoursAutomatedSilk\", lowBound=0, cat='Continuous')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FabricProductionCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 50 * (Hours_Manual_Cotton + Hours_Manual_Silk) + 100 * (Hours_Automated_Cotton + Hours_Automated_Silk)\nproblem += objective # minimize the total cost of production\n\n# Define the constraints\nproblem += Hours_Manual_Cotton + Hours_Manual_Silk <= 40 # Manual loom hours limit\nproblem += Hours_Automated_Cotton + Hours_Automated_Silk <= 60 # Automated loom hours limit\nproblem += 10 * Hours_Manual_Cotton + 30 * Hours_Automated_Cotton >= 500 # Cotton production requirement\nproblem += 5 * Hours_Manual_Silk + 20 * Hours_Automated_Silk >= 300 # Silk production requirement\nproblem += 5 * Hours_Manual_Silk <= 200 # Silk production limit on manual looms\n\n# Additional constraints to link the production hours to the yards of fabric produced\nproblem += 10 * Hours_Manual_Cotton + 30 * Hours_Automated_Cotton == C\nproblem += 5 * Hours_Manual_Silk + 20 * Hours_Automated_Silk == S\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The yards of cotton fabric:\", C.value())\nprint(\"The yards of silk fabric:\", S.value())\nprint(\"Hours on manual loom for cotton:\", Hours_Manual_Cotton.value())\nprint(\"Hours on manual loom for silk:\", Hours_Manual_Silk.value())\nprint(\"Hours on automated loom for cotton:\", Hours_Automated_Cotton.value())\nprint(\"Hours on automated loom for silk:\", Hours_Automated_Silk.value())\nprint(\"The total cost of production:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Amazing Decor buys and sells both furniture and carpet. Each furniture takes 12 square feet of space while each carpet takes 7 square feet of space. The company has 1200 square feet of space available. Buying a furniture costs the store $300 and buying a carpet costs the store $80. The company has a budget of $30000. In addition, at least 20% of items in stock have to be furniture. If the profit per furniture sold is $40 and the profit per carpet sold is $30, how many of each should the company buy and sell to maximize profit?",
        "formatted_answers": "The number of furniture to buy and sell: ?\nThe number of carpets to buy and sell: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"Furniture\", lowBound=0, cat='Integer') # number of furniture bought and sold\ny = LpVariable(\"Carpets\", lowBound=0, cat='Integer') # number of carpets bought and sold\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AmazingDecorProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 40 * x + 30 * y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 12 * x + 7 * y <= 1200 # space constraint\nproblem += 300 * x + 80 * y <= 30000 # budget constraint\nproblem += x >= 0.2 * (x + y) # at least 20% of items are furniture\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of furniture to buy and sell:\", x.value())\nprint(\"The number of carpets to buy and sell:\", y.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A woman owns two cafes. Running cafe 1 for an hour costs $400 and makes 12 lattes, 18 americanos, and 16 macchiatos. Running cafe 2 for an hour costs $550 and makes 14 lattes, 20 americanos, and 9 macchiatos. To meet demand, she must make at least 90 lattes, 80 americanos, and 40 macchiatos. How many hours should she run each cafe to minimize costs?",
        "formatted_answers": "The number of hours to run cafe 1: ?\nThe number of hours to run cafe 2: ?\nThe minimum cost: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"HoursCafe1\", lowBound=0, cat='Continuous') # number of hours running cafe 1\ny = LpVariable(\"HoursCafe2\", lowBound=0, cat='Continuous') # number of hours running cafe 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CafeOperation\", LpMinimize)\n\n# Define the objective function\nobjective = 400 * x + 550 * y\nproblem += objective # minimize the cost of running cafes\n\n# Define the constraints\nproblem += 12 * x + 14 * y >= 90 # latte production constraint\nproblem += 18 * x + 20 * y >= 80 # americano production constraint\nproblem += 16 * x + 9 * y >= 40 # macchiato production constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of hours to run cafe 1:\", x.value())\nprint(\"The number of hours to run cafe 2:\", y.value())\nprint(\"The minimum cost:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A bakery chain called SweetSpot is planning its daily production of cupcakes, muffins, and pies.\nSweetSpot has different profit margins for each type of baked good. The profit margins and production costs per unit are shown in the following Table.\nTable (Profit margin and production cost per unit for cupcakes, muffins, and pies):\n| Baked Good | Production Cost Per Unit | Profit Margin Per Unit |\n|------------|--------------------------|------------------------|\n| Cupcakes   | $1.50                    | $0.50                  |\n| Muffins    | $2.00                    | $0.75                  |\n| Pies       | $5.00                    | $2.00                  |\nSweetSpot wants to maximize its daily profit from the sale of cupcakes, muffins, and pies.\nThe bakery can produce a maximum of 1000 units of baked goods daily.\nThe demand for muffins is higher than cupcakes, so the bakery must produce at least twice as many muffins as cupcakes.\nThe bakery has a budget of $4000 for daily production costs.\nThe bakery must produce at least 100 pies per day to meet a contract with a local coffee shop.\nThe bakery wants to ensure a variety of baked goods, so they want to produce at least 50 cupcakes each day.",
        "formatted_answers": "The number of cupcakes to produce: ?\nThe number of muffins to produce: ?\nThe number of pies to produce: ?\nThe maximum daily profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Cupcakes\", lowBound=50, cat='Integer') # number of cupcakes to produce\nM = LpVariable(\"Muffins\", lowBound=0, cat='Integer') # number of muffins to produce\nP = LpVariable(\"Pies\", lowBound=100, cat='Integer') # number of pies to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SweetSpotBakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nproblem += 0.50 * C + 0.75 * M + 2.00 * P, \"Total Profit\"\n\n# Define the constraints\nproblem += C + M + P <= 1000, \"Maximum Production\"\nproblem += M >= 2 * C, \"Muffin Demand\"\nproblem += 1.50 * C + 2.00 * M + 5.00 * P <= 4000, \"Production Cost Budget\"\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of cupcakes to produce:\", C.value())\nprint(\"The number of muffins to produce:\", M.value())\nprint(\"The number of pies to produce:\", P.value())\nprint(\"The maximum daily profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A store sells two different scents of hand lotion, Eucalyptus and Citrus. The store owner pays $6 for a bottle of Eucalyptus lotion and $8 for a bottle of Citrus lotion. A bottle of Eucalyptus lotion yields a profit of $1 while a bottle of Citrus lotion yields a profit of $4. The store owner estimates that no more than 1500 bottles of lotion will be sold every month and she does not plan to invest more than $10000 in inventory for these lotions. How many bottles of each lotion should be stocked in order to maximize her total profit?",
        "formatted_answers": "The number of bottles of Eucalyptus lotion: ?\nThe number of bottles of Citrus lotion: ?\nTotal profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"Eucalyptus\", lowBound=0, cat='Integer') # number of bottles of Eucalyptus lotion\ny = LpVariable(\"Citrus\", lowBound=0, cat='Integer') # number of bottles of Citrus lotion\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 1 * x + 4 * y # maximize total profit\n\n# Define the constraints\nproblem += 6 * x + 8 * y <= 10000 # inventory limitation\nproblem += x + y <= 1500 # sales limitation\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of bottles of Eucalyptus lotion:\", x.value())\nprint(\"The number of bottles of Citrus lotion:\", y.value())\nprint(\"Total profit:\", value(problem.objective))\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "A farmer has 90 acres of land to grow mushrooms and truffles. Each acre of mushrooms requires $80 in maintenance and 2 hours of care. Each acre of truffles requires $200 in maintenance and 3 hours of care. The farmer has at most $13500 to spend on maintenance and 120 hours of time available for care keeping. If the profit per acre of mushrooms is $200 and the profit per acre of truffles is $500, how many  acres of each should be grown to maximize profit?",
        "formatted_answers": "The number of acres for mushrooms: ?\nThe number of acres for truffles: ?\nThe maximum profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"MushroomAcres\", lowBound=0, cat='Continuous') # number of acres of mushrooms\ny = LpVariable(\"TruffleAcres\", lowBound=0, cat='Continuous') # number of acres of truffles\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * x + 500 * y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 80 * x + 200 * y <= 13500 # budget for maintenance\nproblem += 2 * x + 3 * y <= 120 # time for care keeping\nproblem += x + y <= 90 # land available\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of acres for mushrooms:\", x.value())\nprint(\"The number of acres for truffles:\", y.value())\nprint(\"The maximum profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    },
    {
        "question": "Sweet Treats Bakery wants to plan their production of cakes and cookies for a special event.\nThe bakery can produce cakes and cookies with the following profit margins and required baking times (in hours) per item:\nTable (Profit and baking time per item):\n| Item     | Profit per Item | Baking Time (hours) |\n| -------- | --------------- | ------------------- |\n| Cakes    | $15             | 2                   |\n| Cookies  | $5              | 0.5                 |\nThe bakery wants to maximize the total profit from cakes and cookies.\nThe bakery has a total of 30 hours of oven time available.\nThe bakery has a maximum capacity to decorate 40 cakes and 120 cookies per day.\nThe special event requires at least 10 cakes and 50 cookies.",
        "formatted_answers": "The number of cakes to produce: ?\nThe number of cookies to produce: ?\nThe total profit: ?",
        "output": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nCakes = LpVariable(\"Cakes\", lowBound=10, cat='Integer') # number of cakes\nCookies = LpVariable(\"Cookies\", lowBound=50, cat='Integer') # number of cookies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * Cakes + 5 * Cookies\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * Cakes + 0.5 * Cookies <= 30 # oven time constraint\nproblem += Cakes <= 40 # maximum capacity for cakes\nproblem += Cookies <= 120 # maximum capacity for cookies\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"## start solving\")\nprint(\"The number of cakes to produce:\", Cakes.value())\nprint(\"The number of cookies to produce:\", Cookies.value())\nprint(\"The total profit:\", objective.value())\nprint(\"## end solving\")\n\n"
    }
]